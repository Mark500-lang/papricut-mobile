workflows:
  ios-production:
    name: iOS Production Build
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "18.x"
        COCOAPODS_VERSION: "1.15.2"
        DEVELOPMENT_TEAM: "H9A4H444G4"
        PROFILE_UUID: "515def82-56ac-478e-b89c-e0023f684b14"   
      groups:
        - Papricut
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - ios/Pods
    triggering:
      events:
        - push
    scripts:
      # PHASE 1: CLEAN AND SETUP
      - name: Clean Workspace
        script: |
          echo "=== Cleaning Workspace ==="
          rm -rf node_modules ios/Pods ios/App/Pods
          npm cache clean --force

      # PHASE 2: DEPENDENCY INSTALLATION
      - name: Install Dependencies
        script: |
          set -ex
          echo "=== Installing Node Modules ==="
          npm ci
          
          echo "=== Verifying Capacitor Versions ==="
          npm list @capacitor/core @capacitor/cli @capacitor/ios
          npx cap doctor | grep -v "android" || true

      # PHASE 3: IOS PLATFORM CONFIGURATION
      - name: Configure iOS Project
        script: |
          echo "=== Syncing iOS Platform ==="
          npx cap sync ios --deployment
          
          echo "=== Generating Podfile ==="
          cd ios/App
          cat <<EOT > Podfile
          platform :ios, '13.0'
          use_frameworks! :linkage => :dynamic
          
          # Suppress CDN warning
          install! 'cocoapods', :warn_for_unused_master_specs_repo => false
          
          target 'App' do
            # Capacitor Core
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
            
            # Capacitor Plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorBrowser', :path => '../../node_modules/@capacitor/browser'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorFilesystem', :path => '../../node_modules/@capacitor/filesystem'
            pod 'CapacitorHaptics', :path => '../../node_modules/@capacitor/haptics'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
            pod 'CapacitorNetwork', :path => '../../node_modules/@capacitor/network'
            pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'
            pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
            pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                if target.name.start_with?('Capacitor')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
          end
          EOT
          
          echo "=== Installing Pods ==="
          pod repo update
          pod install --repo-update --clean-install
          
          echo "=== Verifying Capacitor Installation ==="
          # Check for Capacitor in expected locations
          if [ -d "../../node_modules/@capacitor/ios/Capacitor" ] || 
             [ -d "Pods/Capacitor" ] || 
             [ -d "${PODS_ROOT}/Capacitor" ]; then
            echo "✅ Capacitor installation verified"
            echo "Framework locations:"
            find Pods -name "Capacitor*" -type d
          else
            echo "❌ Capacitor installation failed!"
            echo "Checking node_modules:"
            ls -la ../../node_modules/@capacitor/ios
            echo "Checking Pods:"
            ls -la Pods/
            exit 1
          fi

      - name: Configure Signing
        script: |
          set -ex
          echo "=== Setting Up Signing ==="
          cd ios/App
          
          # Import certificates
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          
          # Extract provisioning profile UUID
          PROFILE_UUID=$(grep -a -A1 UUID profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          [ -n "$PROFILE_UUID" ] || { echo "❌ Failed to extract profile UUID"; exit 1; }
          
          # Set up keychain
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          # Create pod signing override file in project root
          echo "=== Configuring Pod Signing ==="
          cat <<EOT > disable-pod-signing.xcconfig
          CODE_SIGNING_ALLOWED = NO
          CODE_SIGNING_REQUIRED = NO
          PROVISIONING_PROFILE_SPECIFIER = ""
          DEVELOPMENT_TEAM = ""
          EOT
          
          # Update Pods xcconfig files with absolute path
          PODS_ROOT_ABS=$(pwd)/Pods
          find "Pods/Target Support Files" -name "*.*cconfig" | while read file; do
            echo "#include \"$(pwd)/disable-pod-signing.xcconfig\"" >> "$file"
          done
          
          # Fully convert to manual signing
          echo "=== Updating Project Settings ==="
          PBXPROJ="App.xcodeproj/project.pbxproj"
          cp "$PBXPROJ" "$PBXPROJ.bak"
          
          # Remove any automatic signing settings
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ"
          sed -i '' '/CODE_SIGN_STYLE/d' "$PBXPROJ"
          sed -i '' '/DEVELOPMENT_TEAM/d' "$PBXPROJ"
          
          # Add manual signing settings
          sed -i '' "/buildSettings = {/a \\
              CODE_SIGN_STYLE = Manual; \\
              PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\"; \\
              DEVELOPMENT_TEAM = H9A4H444G4; \\
              CODE_SIGN_IDENTITY = \"Apple Distribution\"; \\
              " "$PBXPROJ"
          
          echo "✅ Signing configuration complete"
      - name: Increment Build Number
        script: |
          cd ios/App
          
          # Get current build number
          PLIST_PATH="App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")
          
          # Increment build number
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"
          
          # Verify version info
          echo "Version: $(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH")"
          echo "Build: $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")"
      - name: Verify Version Numbers
        script: |
          cd ios/App
          
          # Get version info from built app
          PLIST_PATH="build/App.xcarchive/Products/Applications/App.app/Info.plist"
          echo "Final Version: $(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH")"
          echo "Final Build: $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")"
          
          # Verify build number > 1
          BUILD_NUMBER=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")
          if [ "$BUILD_NUMBER" -le 1 ]; then
            echo "❌ Build number must be greater than 1 for App Store Connect"
            exit 1
          fi
      - name: Validate Build Environment
        script: |
          echo "=== Xcode Version ==="
          xcodebuild -version
          
          echo "=== Available Signing Identities ==="
          security find-identity -v -p codesigning
          
          echo "=== Provisioning Profile Info ==="
          security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision" | grep -A1 -E 'ApplicationIdentifierPrefix|application-identifier'
          
          echo "=== Current Build Settings ==="
          cd ios/App
          xcodebuild -showBuildSettings | grep -i 'PROVISIONING_PROFILE\|BUNDLE_IDENTIFIER\|CODE_SIGN'
      - name: Clean Derived Data
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
      - name: Build and Archive
        script: |
          set -ex
          cd ios/App
          
          # Clean previous builds
          rm -rf build/*
          
          # Verify signing assets
          echo "=== Verifying Signing Assets ==="
          security find-identity -v -p codesigning
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          if [ ! -f "$PROFILE_PATH" ]; then
            echo "❌ Provisioning profile not found at: $PROFILE_PATH"
            exit 1
          fi
          
          # Build without signing (will sign manually later)
          echo "=== Building Unsigned Archive ==="
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            clean archive
          
          # Verify archive exists
          if [ ! -d "build/App.xcarchive" ]; then
            echo "❌ Archive failed"
            exit 1
          fi
          
          # Prepare entitlements - FIXED VERSION
          echo "=== Preparing Entitlements ==="
          TEMP_ENTITLEMENTS=$(mktemp)
          cat <<EOF > "$TEMP_ENTITLEMENTS"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>application-identifier</key>
              <string>$DEVELOPMENT_TEAM.$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "build/App.xcarchive/Products/Applications/App.app/Info.plist")</string>
              <key>get-task-allow</key>
              <false/>
              <key>keychain-access-groups</key>
              <array>
                  <string>$DEVELOPMENT_TEAM.*</string>
              </array>
          </dict>
          </plist>
          EOF
          
          # Manual signing process
          echo "=== Performing Manual Signing ==="
          APP_PATH="build/App.xcarchive/Products/Applications/App.app"
          
          # 1. Embed provisioning profile
          cp "$PROFILE_PATH" "$APP_PATH/embedded.mobileprovision"
          
          # 2. Sign frameworks first
          find "$APP_PATH/Frameworks" -name "*.framework" -print0 | while IFS= read -r -d '' fw; do
            codesign --force --sign "Apple Distribution" --preserve-metadata=identifier,entitlements "$fw"
          done
          
          # 3. Sign main app bundle
          codesign --force --sign "Apple Distribution" \
            --entitlements "$TEMP_ENTITLEMENTS" \
            --generate-entitlement-der \
            "$APP_PATH"
          
          # Final verification
          echo "=== Verifying Signature ==="
          codesign -vvv --deep --strict "$APP_PATH"
          echo "✅ Build successfully signed and validated"
      # - name: Verify Build Artifacts
      #   script: |
      #     echo "=== Verifying Build Output ==="
          
      #     # Check for xcarchive
      #     if [ ! -d "ios/App/build/App.xcarchive" ]; then
      #       echo "❌ Missing App.xcarchive"
      #       exit 1
      #     fi
          
      #     # Check for IPA if expected
      #     if [ ! -f "ios/App/build/ipa/App.ipa" ]; then
      #       echo "❌ Missing App.ipa"
      #       exit 1
      #     fi
          
      #     # Verify archive contents
      #     echo "Archive Contents:"
      #     ls -la "ios/App/build/App.xcarchive/Products/Applications/App.app"
          
      #     echo "✅ Build artifacts verified"

      - name: Verify Configuration
        script: |
          cd ios/App
          echo "=== Checking Configuration Files ==="
          find . -name "*.xcconfig" -exec grep -l "disable-pod-signing" {} \;
          echo "=== Current Signing Settings ==="
          xcodebuild -showBuildSettings -workspace App.xcworkspace -scheme App | grep -i signing
      - name: Validate Export Environment
        script: |
          echo "=== Network Test ==="
          curl -I https://developer.apple.com
          
          echo "=== Team ID Verification ==="
          echo "DEVELOPMENT_TEAM: $DEVELOPMENT_TEAM"
          
          echo "=== Bundle ID Verification ==="
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "ios/App/build/App.xcarchive/Products/Applications/App.app/Info.plist"
          
          echo "=== Profile Contents ==="
          security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision" | \
            grep -A1 -E 'application-identifier|com.apple.developer.team-identifier'
      - name: Export IPA
        script: |
          set -ex
          cd ios/App
          
          # Verify and set default variables if missing
          : ${DEVELOPMENT_TEAM:="H9A4H444G4"}  # Your team ID as default
          : ${PROFILE_UUID:="$(find ~/Library/MobileDevice/Provisioning\ Profiles -name "*.mobileprovision" -print0 | xargs -0 ls -t | head -1 | sed 's/.*\.mobileprovision$//')"}
          
          if [ -z "$DEVELOPMENT_TEAM" ] || [ -z "$PROFILE_UUID" ]; then
            echo "❌ Critical: Missing required variables"
            echo "DEVELOPMENT_TEAM: $DEVELOPMENT_TEAM"
            echo "PROFILE_UUID: $PROFILE_UUID"
            echo "Available provisioning profiles:"
            ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
            exit 1
          fi
          
          # Rest of your export script remains the same...
          echo "Using Team ID: $DEVELOPMENT_TEAM"
          echo "Using Profile UUID: $PROFILE_UUID"
          
          # Create exportOptions.plist
          cat <<EOF > exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "build/App.xcarchive/Products/Applications/App.app/Info.plist")</key>
                  <string>$PROFILE_UUID</string>
              </dict>
          </dict>
          </plist>
          EOF
          
          # Continue with export...
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/ipa
      
      - name: Final Verification
        script: |
          set -ex
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="ios/App/build/App.xcarchive/Products/Applications/App.app"
          
          # 1. Verify signing
          codesign -vvv --deep --strict "$APP_PATH"
          
          # 2. Check critical files with better error messages
          check_file() {
            if [ -e "$1" ]; then
              echo "✅ Found: $1"
            else
              echo "❌ MISSING: $1"
              echo "=== Directory Contents ==="
              ls -la "$(dirname "$1")"
              exit 1
            fi
          }
          
          check_file "$APP_PATH/Assets.car"
          check_file "$APP_PATH/Base.lproj/LaunchScreen.storyboardc"
          check_file "$APP_PATH/Info.plist"
          check_file "$APP_PATH/Frameworks/Capacitor.framework"
          
          # 3. Verify web assets
          if [ ! -d "$APP_PATH/public" ]; then
            echo "❌ Missing web assets directory"
            exit 1
          fi
          
          echo "✅ All critical files present and valid"
    artifacts:
      - ios/App/build/ipa/App.ipa
      - ios/App/xcodebuild.log

    publishing:
      app_store_connect:
        auth: integration  # Uses Codemagic's stored API key
        submit_to_testflight: true