workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        NODE_OPTIONS: "--max-old-space-size=4096"
        NODE_VERSION: "18.x"
        NVM_DIR: "/Users/builder/.nvm"
      groups:
        - Papricut
    triggering:
      events:
        - push
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - .angular/cache
    scripts:
      - name: Complete Build Environment Cleanup
        script: |
          echo "=== COMPLETE BUILD ENVIRONMENT CLEANUP ==="
          # Xcode caches
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          
          # Pods reset
          rm -rf ios/App/Pods
          rm -rf ios/App/Podfile.lock
          
          # Node cleanup
          rm -rf node_modules
          rm -rf .angular/cache
          
          # Capacitor iOS platform reset
          rm -rf ios/App/App/public
          rm -rf ios/App/App.xcworkspace/xcuserdata
          
          echo "✅ Environment cleaned"

      - name: Install and Use Node 18
        script: |
          echo "=== INSTALLING NODE 18 ==="
          # Install Node 18 using Codemagic's built-in tool
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # Install specific Node 18 version that works with our Angular version
          nvm install 18.20.2
          nvm use 18.20.2
          
          # Verify Node is actually 18.x
          if ! node -v | grep -q 'v18'; then
            echo "❌ Failed to set Node 18"
            exit 1
          fi
          
          # Clean npm cache
          npm cache clean --force
          
          # Install required global packages with exact versions
          npm install -g npm@8.19.4  # Specific version known to work with Node 18
          npm install -g @angular/cli@17.3.17 @ionic/cli@7.2.1 native-run cordova-res
          
          # Verify installations
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Angular CLI version: $(ng version | head -n 1)"
          
          # Install correct CocoaPods version
          gem install cocoapods -v 1.15.2 --conservative

      - name: Install Dependencies
        script: |
          echo "=== INSTALLING DEPENDENCIES ==="
          npm install --legacy-peer-deps --no-audit
          npm install --save-exact @angular-devkit/build-angular@17.3.17 @ionic/angular-toolkit@7.1.1
          
          if [ ! -d "node_modules/@angular-devkit/build-angular" ]; then
            echo "❌ CRITICAL: Angular build tools missing!"
            npm list
            exit 1
          fi

      - name: Verify Capacitor Plugins
        script: |
          echo "=== CAPACITOR PLUGIN CHECK ==="
          REQUIRED_PLUGINS=(
            "@capacitor/core" 
            "@capacitor/ios"
            "@capacitor/camera"
            "@capacitor/keyboard"
          )
          
          for plugin in "${REQUIRED_PLUGINS[@]}"; do
            if [ ! -d "node_modules/$plugin" ]; then
              echo "❌ Missing plugin: $plugin"
              exit 1
            fi
          done

      - name: Build Angular App
        script: |
          echo "=== BUILDING PRODUCTION ASSETS ==="
          
          # First verify environment files
          if [ ! -f "src/environments/environment.prod.ts" ]; then
            echo "❌ Missing production environment file!"
            exit 1
          fi
          
          # Run build with verbose output
          ng build --configuration production --output-path www --verbose
          
          if [ ! -d "www" ]; then
            echo "❌ Build failed - www directory not created"
            echo "=== BUILD DEBUG OUTPUT ==="
            cat angular.log || echo "No angular.log found"
            exit 1
          fi
          
          # Verify critical files
          REQUIRED_FILES=(
            "www/index.html"
            "www/main.*.js"
            "www/runtime.*.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if ! ls $file >/dev/null 2>&1; then
              echo "❌ Missing web file: $file"
              ls -la www/
              exit 1
            fi
          done

      - name: Configure Podfile with Complete Static Setup
        script: |
          echo "=== UPDATING PODFILE WITH COMPLETE STATIC CONFIGURATION ==="
          cat << 'EOF' > ios/App/Podfile
          use_frameworks! :linkage => :static
          use_modular_headers!
          
          platform :ios, '13.0'
          
          install! 'cocoapods', 
            :disable_input_output_paths => true,
            :generate_multiple_pod_projects => true,
            :deterministic_uuids => true
          
          def capacitor_pods
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios', 
                :modular_headers => true,
                :configuration => ['Release']
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios', 
                :modular_headers => true,
                :configuration => ['Release']
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app',
                :configuration => ['Release']
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera',
                :configuration => ['Release']
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard',
                :configuration => ['Release']
          end
          
          target 'App' do
            capacitor_pods
            
            post_install do |installer|
              require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'
              assertDeploymentTarget(installer)
              
              installer.pods_project.build_configurations.each do |config|
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['SKIP_INSTALL'] = 'YES'
                config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
              end
              
              installer.pods_project.targets.each do |target|
                target.build_configurations.each do |config|
                  config.build_settings['MACH_O_TYPE'] = 'staticlib'
                  config.build_settings['OTHER_LDFLAGS'] = '$(inherited) -ObjC -all_load'
                  config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                  config.build_settings['SKIP_INSTALL'] = 'YES'
                  config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                  config.build_settings['CODE_SIGN_IDENTITY'] = ''
                  
                  if target.name.start_with?('Capacitor')
                    config.build_settings['SWIFT_VERSION'] = '5.0'
                    config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                    config.build_settings['DEFINES_MODULE'] = 'YES'
                    config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
                    config.build_settings['SWIFT_OBJC_BRIDGING_HEADER'] = '${PODS_ROOT}/Headers/Public/Capacitor/Capacitor/Capacitor-Bridging-Header.h'
                    config.build_settings['SWIFT_INCLUDE_PATHS'] = '${PODS_ROOT}/Headers/Public/Capacitor'
                  fi
                  
                  config.build_settings['FRAMEWORK_SEARCH_PATHS'] = [
                    '$(inherited)',
                    '$(PODS_ROOT)/Capacitor',
                    '$(PODS_ROOT)/CapacitorCordova'
                  ].join(' ')
                end
              end
            end
          end
          EOF

      - name: Setup Static Framework Infrastructure
        script: |
          echo "=== SETTING UP STATIC FRAMEWORK INFRASTRUCTURE ==="
          cd ios/App
          
          mkdir -p Pods/Headers/Public/Capacitor/Capacitor
          cat <<EOF > Pods/Headers/Public/Capacitor/module.modulemap
          framework module Capacitor {
            umbrella header "Capacitor.h"
            export *
            module * { export * }
          }
          EOF
          
          BRIDGE_HEADER="Pods/Headers/Public/Capacitor/Capacitor/Capacitor-Bridging-Header.h"
          [ -f "$BRIDGE_HEADER" ] || touch "$BRIDGE_HEADER"
          
          CAP_HEADERS=(
            "Capacitor.h"
            "CAPBridgeViewController.h"
            "CAPBridgedPlugin.h"
          )
          
          for header in "${CAP_HEADERS[@]}"; do
            [ -f "Pods/Headers/Public/Capacitor/$header" ] || 
              cp "../../node_modules/@capacitor/ios/Capacitor/Capacitor/$header" "Pods/Headers/Public/Capacitor/" || true
          done
          
          echo "✅ Static framework infrastructure verified"

      - name: Verify Static Framework Setup
        script: |
          echo "=== STATIC FRAMEWORK VERIFICATION ==="
          cd ios/App
          
          if ! find Pods -name "libCapacitor.a" | grep -q "libCapacitor.a"; then
            echo "❌ Capacitor static library not found"
            xcodebuild -project Pods/Pods.xcodeproj \
                      -target Capacitor \
                      -configuration Release \
                      -sdk iphoneos \
                      BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                      MACH_O_TYPE=staticlib \
                      ONLY_ACTIVE_ARCH=NO \
                      SKIP_INSTALL=NO \
                      build
            if ! find Pods -name "libCapacitor.a" | grep -q "libCapacitor.a"; then
              echo "❌ Failed to build static library"
              exit 1
            fi
          fi
          
          [ -f "Pods/Headers/Public/Capacitor/module.modulemap" ] || {
            echo "❌ Modulemap missing"
            exit 1
          }
          
          echo "✅ Static framework verification passed"

      - name: Verify Pod Installation Results
        script: |
          echo "=== POD INSTALLATION VERIFICATION ==="
          cd ios/App
          
          REQUIRED_FILES=(
            "Pods/Capacitor/libCapacitor.a"
            "Pods/CapacitorCordova/libCapacitorCordova.a"
            "Pods/Headers/Public/Capacitor/Capacitor.h"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            [ -f "$file" ] || {
              echo "❌ Missing critical pod file: $file"
              exit 1
            }
          done
          
          ARCHS=$(lipo -info Pods/Capacitor/libCapacitor.a 2>/dev/null | awk -F': ' '{print $2}')
          [[ "$ARCHS" == *"arm64"* ]] || {
            echo "❌ Capacitor static library missing arm64 architecture"
            echo "Found architectures: $ARCHS"
            exit 1
          }
          
          echo "✅ Pod installation verified"

      - name: Sync Capacitor iOS Project
        script: |
          echo "=== SYNCING CAPACITOR IOS ==="
          rm -rf ios/App/App/public
          npx cap sync ios
          
          REQUIRED_FILES=(
            "ios/App/App/public/index.html"
            "ios/App/App/App.entitlements"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing critical file: $file"
              mkdir -p ios/App/App/public
              cp -R www/* ios/App/App/public/
              [ -f "$file" ] || {
                echo "❌ Still missing after manual copy"
                exit 1
              }
            fi
          done
          
          [ -d "ios/App/App.xcworkspace" ] || {
            echo "❌ Xcode workspace missing"
            exit 1
          }
          
          echo "✅ iOS sync completed successfully"

      - name: Update Info.plist
        script: |
          echo "=== UPDATING INFO.PLIST ==="
          PLIST_PATH="ios/App/App/Info.plist"
          
          /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity dict" "$PLIST_PATH" || true
          
          for domain in "api.papricut.com" "cdn.papricut.com"; do
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains dict" "$PLIST_PATH" || true
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains:${domain} dict" "$PLIST_PATH" || true
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSIncludesSubdomains true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionAllowsInsecureHTTPLoads false" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionRequiresForwardSecrecy true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionMinimumTLSVersion TLSv1.2" "$PLIST_PATH"
          done

      - name: Setup Code Signing
        script: |
          echo "=== SETTING UP CODE SIGNING ==="
          
          # Decode signing assets
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision"
          
          # Install provisioning profile
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV
          
          # Setup keychain
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Configure Pods Signing (Static Framework Fix)
        script: |
          echo "=== CONFIGURING PODS FOR STATIC FRAMEWORKS ==="
          find ios/App/Pods -name project.pbxproj | while read pbxproj; do
            sed -i '' 's/CODE_SIGNING_ALLOWED = .*/CODE_SIGNING_ALLOWED = NO;/g' "$pbxproj"
            sed -i '' 's/CODE_SIGNING_REQUIRED = .*/CODE_SIGNING_REQUIRED = NO;/g' "$pbxproj"
            sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = "";/g' "$pbxproj"
            sed -i '' 's/PROVISIONING_PROFILE = .*/PROVISIONING_PROFILE = "";/g' "$pbxproj"
            sed -i '' 's/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = "";/g' "$pbxproj"
            sed -i '' 's/CODE_SIGN_STYLE = .*/CODE_SIGN_STYLE = Automatic;/g' "$pbxproj"
          done

      - name: Increment Build Number
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"

      - name: Build IPA with Static Framework Support
        script: |
          echo "=== BUILDING WITH STATIC FRAMEWORK SUPPORT ==="
          export NSUnbufferedIO=YES
          export CAPACITOR_IOS_POD_PATH=$(pwd)/ios/App/Pods/Capacitor
          export CAPACITOR_LIB_SEARCH_PATHS="$CAPACITOR_IOS_POD_PATH/Static"
          
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"
          
          set -o pipefail && xcodebuild \
                    -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    SKIP_INSTALL=NO \
                    OTHER_LDFLAGS="-ObjC -all_load -lCapacitor -lCapacitorCordova" \
                    LIBRARY_SEARCH_PATHS="\$(inherited) $CAPACITOR_IOS_POD_PATH $CAPACITOR_LIB_SEARCH_PATHS" \
                    FRAMEWORK_SEARCH_PATHS="\$(inherited) $CAPACITOR_IOS_POD_PATH" \
                    LD_RUNPATH_SEARCH_PATHS="@executable_path/Frameworks" \
                    ONLY_ACTIVE_ARCH=NO \
                    GCC_PREPROCESSOR_DEFINITIONS="\$(inherited) CAPACITOR_ENABLE_STATIC_FRAMEWORK=1" \
                    archive | tee "$HOME/build/xcodebuild.log"
          
          if [ $? -ne 0 ]; then
            echo "❌ Build failed - analyzing logs"
            grep -A5 -B5 "error:" "$HOME/build/xcodebuild.log" | grep -v "errors generated" | head -50
            exit 1
          fi
          
          echo "✅ Build completed successfully"

      - name: Validate Bundle (Robust Static Linking Check)
        script: |
          echo "=== VALIDATING BUNDLE ==="
          ARCHIVE_PATH="$HOME/build/App.xcarchive"
          APP_PATH="$ARCHIVE_PATH/Products/Applications/App.app"
          
          [ -d "$APP_PATH" ] || {
            echo "❌ App bundle missing from archive"
            exit 1
          }
          
          BINARY_SIZE=$(stat -f%z "$APP_PATH/App" 2>/dev/null || echo 0)
          if [ "$BINARY_SIZE" -lt 3000000 ]; then
            echo "❌ App binary too small ($BINARY_SIZE bytes) - static linking likely failed"
            nm "$APP_PATH/App" 2>/dev/null | grep -i capacitor || echo "No Capacitor symbols found"
            exit 1
          fi
          
          REQUIRED_FILES=(
            "index.html"
            "main.*.js"
            "runtime.*.js"
          )
          
          for pattern in "${REQUIRED_FILES[@]}"; do
            ls "$APP_PATH/public/$pattern" >/dev/null 2>&1 || {
              echo "❌ Missing web file: $pattern"
              exit 1
            }
          done
          
          echo "✅ Bundle validated successfully"

      - name: Export IPA
        script: |
          echo "=== EXPORTING IPA ==="
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates | tee "$HOME/build/export_log.txt"
          
          [ -f "$HOME/build/ipa/App.ipa" ] || {
            echo "❌ IPA export failed"
            grep "error:" "$HOME/build/export_log.txt" || echo "No explicit errors found"
            exit 1
          }
          echo "✅ IPA created successfully"

      - name: Final Verification
        script: |
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Info.plist")"
          echo "Build Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$APP_PATH/Info.plist")"
          codesign -dv --verbose=4 "$APP_PATH"

    artifacts:
      - $HOME/build/xcodebuild.log
      - $HOME/build/export_log.txt
      - ios/App/Pods/Pods.xcodeproj/project.pbxproj
      - $HOME/build/ipa/*.ipa
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true