workflows:
  ios-production:
    name: iOS Production Build
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "18.x"
        COCOAPODS_VERSION: "1.15.2"
      groups:
        - Papricut
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - ios/Pods
    triggering:
      events:
        - push
    scripts:
      # PHASE 1: CLEAN AND SETUP
      - name: Clean Workspace
        script: |
          echo "=== Cleaning Workspace ==="
          rm -rf node_modules ios/Pods ios/App/Pods
          npm cache clean --force

      # PHASE 2: DEPENDENCY INSTALLATION
      - name: Install Dependencies
        script: |
          set -ex
          echo "=== Installing Node Modules ==="
          npm ci
          
          echo "=== Verifying Capacitor Versions ==="
          npm list @capacitor/core @capacitor/cli @capacitor/ios
          npx cap doctor | grep -v "android" || true

      # PHASE 3: IOS PLATFORM CONFIGURATION
      - name: Configure iOS Project
        script: |
          echo "=== Syncing iOS Platform ==="
          npx cap sync ios --deployment
          
          echo "=== Generating Podfile ==="
          cd ios/App
          cat <<EOT > Podfile
          platform :ios, '13.0'
          use_frameworks! :linkage => :dynamic
          
          # Suppress CDN warning
          install! 'cocoapods', :warn_for_unused_master_specs_repo => false
          
          target 'App' do
            # Capacitor Core
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
            
            # Capacitor Plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorBrowser', :path => '../../node_modules/@capacitor/browser'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorFilesystem', :path => '../../node_modules/@capacitor/filesystem'
            pod 'CapacitorHaptics', :path => '../../node_modules/@capacitor/haptics'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
            pod 'CapacitorNetwork', :path => '../../node_modules/@capacitor/network'
            pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'
            pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
            pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                if target.name.start_with?('Capacitor')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
          end
          EOT
          
          echo "=== Installing Pods ==="
          pod repo update
          pod install --repo-update --clean-install
          
          echo "=== Verifying Capacitor Installation ==="
          # Check for Capacitor in expected locations
          if [ -d "../../node_modules/@capacitor/ios/Capacitor" ] || 
             [ -d "Pods/Capacitor" ] || 
             [ -d "${PODS_ROOT}/Capacitor" ]; then
            echo "✅ Capacitor installation verified"
            echo "Framework locations:"
            find Pods -name "Capacitor*" -type d
          else
            echo "❌ Capacitor installation failed!"
            echo "Checking node_modules:"
            ls -la ../../node_modules/@capacitor/ios
            echo "Checking Pods:"
            ls -la Pods/
            exit 1
          fi

      # Rest of your phases remain unchanged...
      - name: Configure Signing
        script: |
          # Your existing signing setup
          set -e
          echo "=== Setting Up Signing ==="
          cd ios/App
          
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          
          PROFILE_UUID=$(grep -a -A1 UUID profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          [ -n "$PROFILE_UUID" ] || { echo "❌ Failed to extract profile UUID"; exit 1; }
          
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          plutil -replace 'CODE_SIGN_STYLE' -string 'Manual' App.xcodeproj/project.pbxproj
          plutil -replace 'PROVISIONING_PROFILE_SPECIFIER' -string "$PROFILE_UUID" App.xcodeproj/project.pbxproj
          plutil -replace 'DEVELOPMENT_TEAM' -string "H9A4H444G4" App.xcodeproj/project.pbxproj

      - name: Build and Archive
        script: |
          set -e
          echo "=== Building Archive ==="
          cd ios/App
          
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            DEVELOPMENT_TEAM="H9A4H444G4" \
            clean archive | tee xcodebuild.log
          
          echo "=== Verifying Archive ==="
          [ -d "build/App.xcarchive" ] || { echo "❌ Archive failed"; exit 1; }

      - name: Export IPA
        script: |
          set -e
          echo "=== Exporting IPA ==="
          cd ios/App
          
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist ../../exportOptions.plist \
            -exportPath build/ipa
          
          echo "=== Verifying IPA ==="
          [ -f "build/ipa/App.ipa" ] || { echo "❌ IPA creation failed"; exit 1; }

    artifacts:
      - ios/App/build/ipa/App.ipa
      - ios/App/xcodebuild.log

    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true