workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        # APP_STORE_CONNECT_KEY_ID: $APP_STORE_CONNECT_KEY_ID
        # APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        # APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
        # DISTRIBUTION_CERTIFICATE: $DISTRIBUTION_CERTIFICATE
        # PROVISIONING_PROFILE: $PROVISIONING_PROFILE
        # CERTIFICATE_PASSWORD: $CERTIFICATE_PASSWORD
        NODE_OPTIONS: "--max-old-space-size=4096"
        NODE_VERSION: "18.x"
        NVM_DIR: "/Users/builder/.nvm"
      groups:
        - Papricut
    triggering:
      events:
        - push
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - .angular/cache
    scripts:
      - name: Install and Use Node 18
        script: |
          echo "=== INSTALLING NODE 18 ==="
          # Install Node 18 using Codemagic's built-in tool
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 18
          nvm use 18
          node -v
          
          # Verify Node is actually 18.x
          if ! node -v | grep -q 'v18'; then
            echo "❌ Failed to set Node 18"
            exit 1
          fi
          
          # Install required global packages
          npm install -g npm@latest
          npm install -g @angular/cli@17.3.17 @ionic/cli@7.2.1 native-run cordova-res
          
          # Install correct CocoaPods version
          gem install cocoapods -v 1.16.2 --conservative
      - name: Set Up Environment
        script: |
          brew install jq
          npm install -g npm@latest
          npm install -g @angular/cli@17.3.17 @ionic/cli@7.2.1 native-run cordova-res
      - name: Install Dependencies
        script: |
          echo "=== CLEANING ENVIRONMENT ==="
          rm -rf node_modules .angular/cache
          npm cache clean --force
          
          echo "=== INSTALLING DEPENDENCIES ==="
          npm install --legacy-peer-deps --no-audit
          npm install --save-exact @angular-devkit/build-angular@17.3.17 @ionic/angular-toolkit@7.1.1
          
          echo "=== VERIFYING INSTALLATIONS ==="
          if [ ! -d "node_modules/@angular-devkit/build-angular" ]; then
            echo "❌ CRITICAL: Angular build tools missing!"
            npm list
            exit 1
          fi
      - name: Verify Capacitor Plugins
        script: |
          echo "=== CAPACITOR PLUGIN CHECK ==="
          # Check engine requirements
          grep -r "engine" node_modules/@capacitor/*/package.json | grep "node"
          
          # Verify core plugins exist
          REQUIRED_PLUGINS=(
            "@capacitor/core" 
            "@capacitor/ios"
            "@capacitor/camera"
            "@capacitor/keyboard"
          )
          
          for plugin in "${REQUIRED_PLUGINS[@]}"; do
            if [ ! -d "node_modules/$plugin" ]; then
              echo "❌ Missing plugin: $plugin"
              exit 1
            fi
          done
      - name: Verify Environment Files
        script: |
          if [ ! -f "src/environments/environment.ts" ] || [ ! -f "src/environments/environment.prod.ts" ]; then
            echo "❌ Missing environment files!"
            ls -la src/environments/
            exit 1
          fi
      - name: Build Angular App
        script: |
          echo "=== BUILDING PRODUCTION ASSETS ==="
          
          # First verify environment files
          if [ ! -f "src/environments/environment.prod.ts" ]; then
            echo "❌ Missing production environment file!"
            exit 1
          fi
          
          # Run build with verbose output
          ng build --configuration production --output-path www --verbose
          
          if [ ! -d "www" ]; then
            echo "❌ Build failed - www directory not created"
            echo "=== BUILD DEBUG OUTPUT ==="
            cat angular.log || echo "No angular.log found"
            exit 1
          fi
          
          # Verify critical files
          REQUIRED_FILES=(
            "www/index.html"
            "www/main.*.js"
            "www/runtime.*.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if ! ls $file >/dev/null 2>&1; then
              echo "❌ Missing web file: $file"
              ls -la www/
              exit 1
            fi
          done
      - name: Setup CocoaPods
        script: |
          echo "Installing correct CocoaPods version..."
          gem uninstall cocoapods -a -x
          gem install cocoapods -v 1.15.2
          pod --version
      - name: Configure Podfile
        script: |
          echo "=== UPDATING PODFILE WITH OPTIMIZED STATIC LINKING ==="
          cat << 'EOF' > ios/App/Podfile
          use_frameworks! :linkage => :static
          use_modular_headers!
          
          platform :ios, '13.0'
          
          # Disable input/output paths for Xcode caching
          install! 'cocoapods', 
            :disable_input_output_paths => true,
            :generate_multiple_pod_projects => true
          
          # Explicit static framework configuration
          def capacitor_pods
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios', 
                :modular_headers => true,
                :linkage => :static
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios', 
                :modular_headers => true,
                :linkage => :static
            
            # Plugin pods
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
            # Add other plugins as needed
          end
          
          target 'App' do
            capacitor_pods
          end
          
          post_install do |installer|
            require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'
            assertDeploymentTarget(installer)
            
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                # Essential static linking settings
                config.build_settings['MACH_O_TYPE'] = 'staticlib'
                config.build_settings['OTHER_LDFLAGS'] = '$(inherited) -ObjC'
                config.build_settings['GENERATE_INFOPLIST_FILE'] = 'YES'
                
                # Ensure static frameworks are embedded
                config.build_settings['SKIP_INSTALL'] = 'NO'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                
                # Swift compatibility
                if target.name.start_with?('Capacitor')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
            
            # Xcode 14+ compatibility
            installer.pods_project.build_configurations.each do |config|
              config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
            end
          end
          EOF
          
          echo "=== RUNNING POD INSTALL ==="
          cd ios/App && pod install --clean-install --repo-update && cd ../..
      - name: Verify iOS Platform
        script: |
          echo "=== IOS PLATFORM CHECK ==="
          if [ ! -d "ios/App" ]; then
            echo "Initializing iOS platform..."
            npx cap add ios
          fi
          
          # Critical iOS files check
          IOS_FILES=(
            "ios/App/App.xcodeproj/project.pbxproj"
            "ios/App/App/Info.plist"
          )
          
          for file in "${IOS_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing iOS file: $file"
              exit 1
            fi
          done
      - name: Sync Capacitor iOS Project
        script: |
          echo "=== SYNCING CAPACITOR IOS ==="
          
          # 1. Clean previous sync artifacts
          echo "Cleaning previous sync..."
          rm -rf ios/App/App/public
          
          # 2. Verify www directory exists
          if [ ! -d "www" ]; then
            echo "❌ www directory missing - did the Angular build fail?"
            exit 1
          fi
          
          # 3. Run sync without --verbose (Capacitor 5 doesn't support it)
          echo "Running capacitor sync..."
          npx cap sync ios
          
          # 4. Verify critical files were created
          REQUIRED_FILES=(
            "ios/App/App/public/index.html"
            "ios/App/App/App.entitlements"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing critical file: $file"
              echo "Attempting manual copy..."
              
              # Manual copy as fallback
              mkdir -p ios/App/App/public
              cp -R www/* ios/App/App/public/
              
              # Verify again after manual copy
              if [ ! -f "$file" ]; then
                echo "❌ Still missing after manual copy"
                echo "Directory contents:"
                find ios/App -type f
                exit 1
              fi
            fi
          done
          
          # 5. Additional verification
          if [ ! -d "ios/App/App.xcworkspace" ]; then
            echo "❌ Xcode workspace missing"
            exit 1
          fi
          
          echo "✅ iOS sync completed successfully"

      - name: Update Info.plist
        script: |
          echo "=== UPDATING INFO.PLIST ==="
          PLIST_PATH="ios/App/App/Info.plist"
          
          # First create the base ATS dictionary if it doesn't exist
          /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity dict" "$PLIST_PATH" || true
          
          # Create exception domains dictionaries
          for domain in "api.papricut.com" "cdn.papricut.com"; do
            # Create domain dictionary if it doesn't exist
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains dict" "$PLIST_PATH" || true
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains:${domain} dict" "$PLIST_PATH" || true
            
            # Now safely add the values
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSIncludesSubdomains true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionAllowsInsecureHTTPLoads false" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionRequiresForwardSecrecy true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionMinimumTLSVersion TLSv1.2" "$PLIST_PATH"
          done
          
          echo "Updated Info.plist contents:"
          plutil -convert xml1 "$PLIST_PATH" -o -
      - name: Debug Signing Variables
        script: |
          echo "=== SIGNING VARIABLES DEBUG ==="
          echo "Distribution Certificate length: ${#DISTRIBUTION_CERTIFICATE}"
          echo "First 50 chars: ${DISTRIBUTION_CERTIFICATE:0:50}"
          echo "Provisioning Profile length: ${#PROVISIONING_PROFILE}"
          echo "First 50 chars: ${PROVISIONING_PROFILE:0:50}"
      - name: Decode signing assets
        script: |
          echo "=== SIGNING ASSETS DEBUG ==="
          
          # 1. Verify variables are available from the group
          echo "Checking environment variables:"
          if [[ -z "${DISTRIBUTION_CERTIFICATE+x}" ]]; then
            echo "❌ DISTRIBUTION_CERTIFICATE not set"
            echo "Available variables:"
            printenv
            exit 1
          fi
          
          if [[ -z "${PROVISIONING_PROFILE+x}" ]]; then
            echo "❌ PROVISIONING_PROFILE not set"
            exit 1
          fi
          
          if [[ -z "${CERTIFICATE_PASSWORD+x}" ]]; then
            echo "❌ CERTIFICATE_PASSWORD not set"
            exit 1
          fi
          
          # 2. Verify variables contain actual data (not just their names)
          if [[ "$DISTRIBUTION_CERTIFICATE" == \$DIST* ]] || 
            [[ "$PROVISIONING_PROFILE" == \$PROV* ]] || 
            [[ "$CERTIFICATE_PASSWORD" == \$CERT* ]]; then
            echo "❌ CRITICAL: Variables not properly injected!"
            echo "This means the 'Papricut' group isn't being properly loaded"
            echo "Please check:"
            echo "1. The variables exist in Codemagic UI"
            echo "2. They're in the 'Papricut' group"
            echo "3. The group name matches exactly (case-sensitive)"
            exit 1
          fi
          
          # 3. Decode files with robust error handling
          echo "=== DECODING FILES ==="
          rm -f signing.p12 "$PROFILE_NAME.mobileprovision"
          
          # Certificate
          echo "Decoding certificate (length: ${#DISTRIBUTION_CERTIFICATE})..."
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12 2>cert_err.txt || {
            echo "❌ Certificate decode failed"
            echo "Error: $(cat cert_err.txt)"
            echo "Certificate starts with: ${DISTRIBUTION_CERTIFICATE:0:50}"
            exit 1
          }
          
          # Profile
          echo "Decoding profile (length: ${#PROVISIONING_PROFILE})..."
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision" 2>prof_err.txt || {
            echo "❌ Profile decode failed"
            echo "Error: $(cat prof_err.txt)"
            echo "Profile starts with: ${PROVISIONING_PROFILE:0:50}"
            exit 1
          }
          
          echo "✅ Successfully decoded:"
          ls -la signing.p12 "$PROFILE_NAME.mobileprovision"

      - name: Install Provisioning Profile
        script: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

      - name: Setup Code Signing
        script: |
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Configure Pods Project
        script: |
          echo "=== CONFIGURING PODS PROJECT ==="
          
          # 1. Disable code signing for all pods
          find ios/App/Pods -name project.pbxproj | while read pbxproj; do
              /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGNING_ALLOWED NO" "$pbxproj"
              /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGNING_REQUIRED NO" "$pbxproj"
              /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PROVISIONING_PROFILE_SPECIFIER ''" "$pbxproj"
              /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PROVISIONING_PROFILE ''" "$pbxproj"
              /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM ''" "$pbxproj"
          done
          
          # 2. Specifically configure Capacitor pods
          CAPACITOR_PODS=(
            "Capacitor" 
            "CapacitorCordova"
            "CapacitorApp"
            "CapacitorCamera"
            "CapacitorKeyboard"
            # Add other Capacitor plugins as needed
          )
          
          for pod in "${CAPACITOR_PODS[@]}"; do
              find ios/App/Pods -name "$pod.xcodeproj" | while read podproj; do
                  pbxproj="$podproj/project.pbxproj"
                  /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PROVISIONING_PROFILE_SPECIFIER ''" "$pbxproj"
                  /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PROVISIONING_PROFILE ''" "$pbxproj"
                  /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_STYLE Automatic" "$pbxproj"
              done
          done
          
          echo "✅ Pods project configured"
      - name: Verify Pod Installation
        script: |
          echo "=== POD INSTALLATION VERIFICATION ==="
          ls -la ios/App/Pods/Capacitor/
          ls -la ios/App/Pods/CapacitorCordova/
          find ios/App/Pods -name "*.a" | xargs ls -la
      - name: Increment Build Number
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"
      - name: Combined Xcode Configuration
        script: |
          echo "=== CONFIGURING XCODE PROJECT ==="
          PBXPROJ_PATH="ios/App/App.xcodeproj/project.pbxproj"
          
          # All build settings in one place
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:FRAMEWORK_SEARCH_PATHS string \$(inherited) \$(PROJECT_DIR)/Pods" "$PBXPROJ_PATH" || true
          /usr/libexec/PlistBuddy -c "Set :objects:13D8C11F2543F3D900D83B1E:buildSettings:ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES YES" "$PBXPROJ_PATH"
          /usr/libexec/PlistBuddy -c "Set :objects:13D8C11F2543F3D900D83B1E:buildSettings:LD_RUNPATH_SEARCH_PATHS string \$(inherited) @executable_path/Frameworks" "$PBXPROJ_PATH"
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:EMBEDDED_CONTENT_CONTAINS_SWIFT string YES" "$PBXPROJ_PATH"
          /usr/libexec/PlistBuddy -c "Set :objects:13D8C11F2543F3D900D83B1E:buildSettings:ALWAYS_SEARCH_USER_PATHS YES" "$PBXPROJ_PATH"
          
          echo "✅ Xcode project configured"
      - name: Pre-Build Xcode Workspace Verification (Robust)
        script: |
          echo "=== XCODE WORKSPACE VERIFICATION ==="
          
          # 1. Verify workspace exists
          if [ ! -d "$XCODE_WORKSPACE" ]; then
            echo "❌ Xcode workspace missing at $XCODE_WORKSPACE"
            echo "Directory contents:"
            ls -la ios/App/
            exit 1
          fi
          
          # 2. Find scheme location (could be in workspace or project)
          SCHEME_PATH=""
          if [ -d "$XCODE_WORKSPACE/xcshareddata/xcschemes" ]; then
            SCHEME_PATH="$XCODE_WORKSPACE/xcshareddata/xcschemes/$XCODE_SCHEME.xcscheme"
          elif [ -d "ios/App/App.xcodeproj/xcshareddata/xcschemes" ]; then
            SCHEME_PATH="ios/App/App.xcodeproj/xcshareddata/xcschemes/$XCODE_SCHEME.xcscheme"
          fi
          
          # 3. Verify scheme exists
          if [ -z "$SCHEME_PATH" ] || [ ! -f "$SCHEME_PATH" ]; then
            echo "⚠️ Scheme $XCODE_SCHEME not found in standard locations"
            echo "Attempting to list all available schemes..."
            
            # List schemes from both possible locations
            echo "Potential schemes in workspace:"
            find "$XCODE_WORKSPACE/xcshareddata/xcschemes" -name "*.xcscheme" 2>/dev/null | xargs -n1 basename || echo "No workspace schemes found"
            
            echo "Potential schemes in project:"
            find "ios/App/App.xcodeproj/xcshareddata/xcschemes" -name "*.xcscheme" 2>/dev/null | xargs -n1 basename || echo "No project schemes found"
            
            # Attempt to use first found scheme if none specified
            FIRST_SCHEME=$(find "$XCODE_WORKSPACE" "ios/App/App.xcodeproj" -name "*.xcscheme" 2>/dev/null | head -1)
            if [ -n "$FIRST_SCHEME" ]; then
              SCHEME_NAME=$(basename "$FIRST_SCHEME" .xcscheme)
              echo "ℹ️ Using first found scheme: $SCHEME_NAME"
              echo "export XCODE_SCHEME=$SCHEME_NAME" >> $CM_ENV
              exit 0
            else
              echo "❌ No schemes found in workspace or project"
              echo "Generating a new scheme..."
              xcodebuild -list -workspace "$XCODE_WORKSPACE"
              xcodebuild -workspace "$XCODE_WORKSPACE" -list
              exit 1
            fi
          fi
          
          # 4. Verify build directory permissions
          mkdir -p "$HOME/build"
          if ! touch "$HOME/build/test_file"; then
            echo "❌ Cannot write to build directory"
            echo "Directory permissions:"
            ls -ld "$HOME/build"
            exit 1
          fi
          rm "$HOME/build/test_file"
          
          echo "✅ Xcode workspace verified - using scheme at $SCHEME_PATH"

      - name: Build IPA with Isolated Signing
        script: |
          echo "=== BUILDING IPA WITH ISOLATED SIGNING ==="
          export NSUnbufferedIO=YES
          
          # Clean previous builds
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"
          
          # 1. Verify provisioning profile
          echo "=== VERIFYING PROVISIONING PROFILE ==="
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          if [ ! -f "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision" ]; then
            echo "❌ Provisioning profile not installed correctly"
            exit 1
          fi
          
          # 2. Completely reset pod signing settings
          echo "=== RESETTING PODS SIGNING ==="
          find ios/App/Pods -name project.pbxproj | while read pbxproj; do
            # Reset all signing-related settings
            /usr/libexec/PlistBuddy -c "Delete :objects:*:buildSettings:PROVISIONING_PROFILE_SPECIFIER" "$pbxproj" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Delete :objects:*:buildSettings:PROVISIONING_PROFILE" "$pbxproj" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Delete :objects:*:buildSettings:CODE_SIGN_STYLE" "$pbxproj" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Delete :objects:*:buildSettings:DEVELOPMENT_TEAM" "$pbxproj" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Delete :objects:*:buildSettings:CODE_SIGN_IDENTITY" "$pbxproj" 2>/dev/null || true
            
            # Ensure automatic signing
            /usr/libexec/PlistBuddy -c "Add :objects:*:buildSettings:CODE_SIGN_STYLE string Automatic" "$pbxproj" 2>/dev/null || true
          done
          
          # 3. Build with manual signing only for main app
          echo "=== STARTING XCODEBUILD ==="
          set -o pipefail && xcodebuild -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    SKIP_INSTALL=NO \
                    OTHER_LDFLAGS="-ObjC -all_load" \
                    LD_RUNPATH_SEARCH_PATHS="@executable_path/Frameworks" \
                    ONLY_ACTIVE_ARCH=NO \
                    archive | tee "$HOME/build/xcodebuild.log"
          
          # Check exit status
          if [ $? -ne 0 ]; then
            echo "❌ Xcode build failed"
            echo "=== BUILD ERROR SUMMARY ==="
            grep -A10 -B5 "error:" "$HOME/build/xcodebuild.log" | grep -v "errors generated" | head -100
            
            # Additional diagnostics
            echo "=== PODS SIGNING STATUS ==="
            find ios/App/Pods -name project.pbxproj | xargs grep -l "PROVISIONING_PROFILE" || echo "No provisioning profiles found in pods"
            
            exit 1
          fi
          
          echo "✅ Archive created successfully at $HOME/build/App.xcarchive"

      - name: Real-time Archive Monitoring
        script: |
          echo "=== REAL-TIME ARCHIVE MONITORING ==="
          
          # 1. Verify archive structure
          ARCHIVE_PATH="$HOME/build/App.xcarchive"
          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "❌ Archive directory missing"
            exit 1
          fi
          
          # 2. Verify critical archive components
          REQUIRED_ARCHIVE_FILES=(
            "Info.plist"
            "Products/Applications/App.app"
            "dSYMs/App.app.dSYM"
          )
          
          for file in "${REQUIRED_ARCHIVE_FILES[@]}"; do
            if [ ! -e "$ARCHIVE_PATH/$file" ]; then
              echo "❌ Missing archive component: $file"
              echo "Archive contents:"
              find "$ARCHIVE_PATH" -type f
              exit 1
            fi
          done
          
          # 3. Verify app binary
          APP_PATH="$ARCHIVE_PATH/Products/Applications/App.app"
          if [ ! -f "$APP_PATH/App" ]; then
            echo "❌ App binary missing from archive"
            echo "App bundle contents:"
            find "$APP_PATH" -type f
            exit 1
          fi
          
          # 4. Verify static framework linking
          echo "=== STATIC FRAMEWORK VERIFICATION ==="
          nm "$APP_PATH/App" | grep -i capacitor || {
            echo "❌ No Capacitor symbols found in binary - static linking may have failed"
            exit 1
          }
          
          echo "✅ Archive verification complete"

      - name: Fallback Archive Creation
        script: |
          echo "=== FALLBACK ARCHIVE CREATION ==="
          
          # Only run if archive is missing
          if [ ! -d "$HOME/build/App.xcarchive" ]; then
            echo "⚠️ Primary archive missing - attempting fallback build"
            
            # 1. Clean derived data
            rm -rf ~/Library/Developer/Xcode/DerivedData/*
            
            # 2. Simpler build command
            xcodebuild -workspace "$XCODE_WORKSPACE" \
                      -scheme "$XCODE_SCHEME" \
                      -sdk iphoneos \
                      -configuration Release \
                      -archivePath "$HOME/build/Fallback.xcarchive" \
                      -destination 'generic/platform=iOS' \
                      DEVELOPMENT_TEAM="$TEAM_ID" \
                      PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                      CODE_SIGN_STYLE="Manual" \
                      CODE_SIGN_IDENTITY="iPhone Distribution" \
                      OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                      archive | tee "$HOME/build/fallback_build.log"
            
            # 3. Verify fallback archive
            if [ -d "$HOME/build/Fallback.xcarchive" ]; then
              echo "✅ Fallback archive created"
              mv "$HOME/build/Fallback.xcarchive" "$HOME/build/App.xcarchive"
            else
              echo "❌ Fallback archive failed"
              echo "=== FALLBACK BUILD ERRORS ==="
              grep -i "error:" "$HOME/build/fallback_build.log" | head -20
              exit 1
            fi
          else
            echo "✅ Primary archive exists - skipping fallback"
          fi
      - name: Verify Code Signing Setup
        script: |
          echo "=== CODE SIGNING VERIFICATION ==="
          # Verify certificate is in keychain
          security find-identity -v -p codesigning | grep "iPhone Distribution" || {
            echo "❌ Distribution certificate not found"
            exit 1
          }
          
          # Verify profile contains correct bundle ID
          PROFILE_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          if [[ "$PROFILE_BUNDLE_ID" != *"$BUNDLE_ID" ]]; then
            echo "❌ Profile bundle ID mismatch"
            echo "Profile contains: $PROFILE_BUNDLE_ID"
            echo "Expected: $BUNDLE_ID"
            exit 1
          fi
          echo "✅ Code signing setup verified"

      - name: Export IPA
        script: |
          echo "=== EXPORTING IPA ==="
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates | tee "$HOME/build/export_log.txt"
          
          if [ ! -f "$HOME/build/ipa/App.ipa" ]; then
            echo "❌ IPA export failed"
            grep "error:" "$HOME/build/export_log.txt" || echo "No explicit errors found"
            exit 1
          fi
          echo "✅ IPA created successfully"
      - name: Validate Bundle (Robust Static Linking Check)
        script: |
          echo "=== VALIDATING BUNDLE ==="
          ARCHIVE_PATH="$HOME/build/App.xcarchive"
          APP_PATH="$ARCHIVE_PATH/Products/Applications/App.app"
          
          # Verify archive structure first
          if [ ! -d "$APP_PATH" ]; then
            echo "❌ App bundle missing from archive"
            echo "Archive contents:"
            find "$ARCHIVE_PATH" -type d
            exit 1
          fi
          
          # Check binary exists and get size
          if [ ! -f "$APP_PATH/App" ]; then
            echo "❌ App binary missing"
            echo "App bundle contents:"
            find "$APP_PATH" -type f
            exit 1
          fi
          
          BINARY_SIZE=$(stat -f%z "$APP_PATH/App" 2>/dev/null || echo 0)
          echo "Binary size: $BINARY_SIZE bytes"
          
          # Check for reasonable binary size (Capacitor apps should be >3MB)
          if [ "$BINARY_SIZE" -lt 3000000 ]; then
            echo "❌ App binary too small ($BINARY_SIZE bytes) - static linking likely failed"
            echo "=== LINKER SYMBOLS CHECK ==="
            nm "$APP_PATH/App" 2>/dev/null | grep -i capacitor || echo "No Capacitor symbols found"
            exit 1
          fi
          
          # Verify web assets
          if [ ! -d "$APP_PATH/public" ]; then
            echo "❌ Web assets directory missing"
            exit 1
          fi
          
          REQUIRED_FILES=(
            "index.html"
            "main.*.js"
            "runtime.*.js"
          )
          
          MISSING_FILES=0
          for pattern in "${REQUIRED_FILES[@]}"; do
            if ! ls "$APP_PATH/public/$pattern" >/dev/null 2>&1; then
              echo "❌ Missing web file: $pattern"
              MISSING_FILES=1
            fi
          done
          
          if [ "$MISSING_FILES" -ne 0 ]; then
            echo "=== WEB ASSETS FOUND ==="
            ls -la "$APP_PATH/public"
            exit 1
          fi
          
          echo "✅ Bundle validated successfully"
          echo "=== FINAL SIZE VERIFICATION ==="
          du -sh "$APP_PATH"
      - name: Final Verification
        script: |
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Info.plist")"
          echo "Build Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$APP_PATH/Info.plist")"
          echo "Web Assets: $(find "$APP_PATH/public" -type f | wc -l) files"
          echo "Plugin Frameworks: $(find "$APP_PATH/Frameworks" -name "*.framework" | wc -l)"
          codesign -dv --verbose=4 "$APP_PATH"
          plutil -convert xml1 "$APP_PATH/Info.plist" -o - | xmllint --format -

    artifacts:
      - $HOME/build/debug_build.log
      - ios/App/App.xcodeproj/project.pbxproj
      - ios/App/Pods/Pods.xcodeproj/project.pbxproj
      - $HOME/build/ipa/*.ipa
      - $HOME/build/archive_log.txt
      - $HOME/build/export_log.txt
      - build.log
      - capacitor_sync.log
      - pod_install.log
      - node_modules_list.txt
      - angular.log
      - src/environments/
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true