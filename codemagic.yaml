workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        # APP_STORE_CONNECT_KEY_ID: $APP_STORE_CONNECT_KEY_ID
        # APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        # APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
        # DISTRIBUTION_CERTIFICATE: $DISTRIBUTION_CERTIFICATE
        # PROVISIONING_PROFILE: $PROVISIONING_PROFILE
        # CERTIFICATE_PASSWORD: $CERTIFICATE_PASSWORD
        NODE_OPTIONS: "--max-old-space-size=4096"
        NODE_VERSION: "18.x"
        NVM_DIR: "/Users/builder/.nvm"
      groups:
        - Papricut
    triggering:
      events:
        - push
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - .angular/cache
    scripts:
      - name: Install and Use Node 18
        script: |
          echo "=== INSTALLING NODE 18 ==="
          # Install Node 18 using Codemagic's built-in tool
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 18
          nvm use 18
          node -v
          
          # Verify Node is actually 18.x
          if ! node -v | grep -q 'v18'; then
            echo "❌ Failed to set Node 18"
            exit 1
          fi
          
          # Install required global packages
          npm install -g npm@latest
          npm install -g @angular/cli@17.3.17 @ionic/cli@7.2.1 native-run cordova-res
          
          # Install correct CocoaPods version
          gem install cocoapods -v 1.16.2 --conservative
      - name: Set Up Environment
        script: |
          brew install jq
          npm install -g npm@latest
          npm install -g @angular/cli@17.3.17 @ionic/cli@7.2.1 native-run cordova-res
      - name: Install Dependencies
        script: |
          echo "=== CLEANING ENVIRONMENT ==="
          rm -rf node_modules .angular/cache
          npm cache clean --force
          
          echo "=== INSTALLING DEPENDENCIES ==="
          npm install --legacy-peer-deps --no-audit
          npm install --save-exact @angular-devkit/build-angular@17.3.17 @ionic/angular-toolkit@7.1.1
          
          echo "=== VERIFYING INSTALLATIONS ==="
          if [ ! -d "node_modules/@angular-devkit/build-angular" ]; then
            echo "❌ CRITICAL: Angular build tools missing!"
            npm list
            exit 1
          fi
      - name: Verify Capacitor Plugins
        script: |
          echo "=== CAPACITOR PLUGIN CHECK ==="
          # Check engine requirements
          grep -r "engine" node_modules/@capacitor/*/package.json | grep "node"
          
          # Verify core plugins exist
          REQUIRED_PLUGINS=(
            "@capacitor/core" 
            "@capacitor/ios"
            "@capacitor/camera"
            "@capacitor/keyboard"
          )
          
          for plugin in "${REQUIRED_PLUGINS[@]}"; do
            if [ ! -d "node_modules/$plugin" ]; then
              echo "❌ Missing plugin: $plugin"
              exit 1
            fi
          done
      - name: Verify Environment Files
        script: |
          if [ ! -f "src/environments/environment.ts" ] || [ ! -f "src/environments/environment.prod.ts" ]; then
            echo "❌ Missing environment files!"
            ls -la src/environments/
            exit 1
          fi
      - name: Build Angular App
        script: |
          echo "=== BUILDING PRODUCTION ASSETS ==="
          
          # First verify environment files
          if [ ! -f "src/environments/environment.prod.ts" ]; then
            echo "❌ Missing production environment file!"
            exit 1
          fi
          
          # Run build with verbose output
          ng build --configuration production --output-path www --verbose
          
          if [ ! -d "www" ]; then
            echo "❌ Build failed - www directory not created"
            echo "=== BUILD DEBUG OUTPUT ==="
            cat angular.log || echo "No angular.log found"
            exit 1
          fi
          
          # Verify critical files
          REQUIRED_FILES=(
            "www/index.html"
            "www/main.*.js"
            "www/runtime.*.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if ! ls $file >/dev/null 2>&1; then
              echo "❌ Missing web file: $file"
              ls -la www/
              exit 1
            fi
          done
      - name: Verify Web Assets
        script: |
          echo "=== WEB ASSET VALIDATION ==="
          
          # Check for main JS file (hashed version)
          if ! ls www/main.*.js >/dev/null 2>&1; then
            echo "❌ Main JS file missing"
            echo "Found files:"
            ls -la www/*.js
            exit 1
          fi
          
          # Check for runtime JS file (hashed version)
          if ! ls www/runtime.*.js >/dev/null 2>&1; then
            echo "❌ Runtime JS file missing"
            exit 1
          fi
          
          # Check for index.html
          if [ ! -f "www/index.html" ]; then
            echo "❌ Index.html missing"
            exit 1
          fi
          
          # Verify production API URL in any main JS file
          MAIN_JS_FILE=$(ls www/main.*.js)
          if ! grep -q "account.papricut.com" "$MAIN_JS_FILE"; then
            echo "❌ Production API URL not found in build"
            echo "Checking file: $MAIN_JS_FILE"
            echo "First 50 lines:"
            head -50 "$MAIN_JS_FILE" | grep -i -A5 -B5 "account" || echo "No account.papricut.com found"
            exit 1
          fi
          
          echo "✅ Web assets validated successfully"
      - name: Setup CocoaPods
        script: |
          echo "Installing correct CocoaPods version..."
          gem uninstall cocoapods -a -x
          gem install cocoapods -v 1.15.2
          pod --version
      - name: Configure Podfile
        script: |
          echo "=== UPDATING PODFILE FOR STATIC FRAMEWORK EMBEDDING ==="
          
          # Create a new Podfile with explicit static framework settings
          cat << 'EOF' > ios/App/Podfile
          use_frameworks! :linkage => :static
          use_modular_headers!
          
          platform :ios, '13.0'
          
          # Workaround for Xcode caching issues
          install! 'cocoapods', 
            :warn_for_unused_master_specs_repo => false,
            :disable_input_output_paths => true
          
          # Capacitor pods with explicit static linking
          def capacitor_pods
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios', :modular_headers => true
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios', :modular_headers => true
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorBrowser', :path => '../../node_modules/@capacitor/browser'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorFilesystem', :path => '../../node_modules/@capacitor/filesystem'
            pod 'CapacitorHaptics', :path => '../../node_modules/@capacitor/haptics'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
            pod 'CapacitorNetwork', :path => '../../node_modules/@capacitor/network'
            pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'
            pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
            pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'
          end
          
          target 'App' do
            capacitor_pods
          end
          
          post_install do |installer|
            require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'
            assertDeploymentTarget(installer)
            
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                # Essential static framework settings
                config.build_settings['MACH_O_TYPE'] = 'staticlib'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['SKIP_INSTALL'] = 'NO' # Critical for embedding
                
                # Disable code signing for pods
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
                
                # Swift compatibility
                if target.name.include?('Capacitor')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
            
            # Xcode 14+ compatibility
            installer.pods_project.build_configurations.each do |config|
              config.build_settings.delete('VALID_ARCHS')
              config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
            end
          end
          EOF
          
          echo "=== RUNNING POD INSTALL ==="
          cd ios/App && pod install --clean-install --repo-update && cd ../..
      - name: Verify iOS Platform
        script: |
          echo "=== IOS PLATFORM CHECK ==="
          if [ ! -d "ios/App" ]; then
            echo "Initializing iOS platform..."
            npx cap add ios
          fi
          
          # Critical iOS files check
          IOS_FILES=(
            "ios/App/App.xcodeproj/project.pbxproj"
            "ios/App/App/Info.plist"
          )
          
          for file in "${IOS_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing iOS file: $file"
              exit 1
            fi
          done
      - name: Sync Capacitor iOS Project
        script: |
          echo "=== SYNCING CAPACITOR IOS ==="
          
          # 1. Clean previous sync artifacts
          echo "Cleaning previous sync..."
          rm -rf ios/App/App/public
          
          # 2. Verify www directory exists
          if [ ! -d "www" ]; then
            echo "❌ www directory missing - did the Angular build fail?"
            exit 1
          fi
          
          # 3. Run sync without --verbose (Capacitor 5 doesn't support it)
          echo "Running capacitor sync..."
          npx cap sync ios
          
          # 4. Verify critical files were created
          REQUIRED_FILES=(
            "ios/App/App/public/index.html"
            "ios/App/App/App.entitlements"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing critical file: $file"
              echo "Attempting manual copy..."
              
              # Manual copy as fallback
              mkdir -p ios/App/App/public
              cp -R www/* ios/App/App/public/
              
              # Verify again after manual copy
              if [ ! -f "$file" ]; then
                echo "❌ Still missing after manual copy"
                echo "Directory contents:"
                find ios/App -type f
                exit 1
              fi
            fi
          done
          
          # 5. Additional verification
          if [ ! -d "ios/App/App.xcworkspace" ]; then
            echo "❌ Xcode workspace missing"
            exit 1
          fi
          
          echo "✅ iOS sync completed successfully"

      - name: Update Info.plist
        script: |
          echo "=== UPDATING INFO.PLIST ==="
          PLIST_PATH="ios/App/App/Info.plist"
          
          # First create the base ATS dictionary if it doesn't exist
          /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity dict" "$PLIST_PATH" || true
          
          # Create exception domains dictionaries
          for domain in "api.papricut.com" "cdn.papricut.com"; do
            # Create domain dictionary if it doesn't exist
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains dict" "$PLIST_PATH" || true
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains:${domain} dict" "$PLIST_PATH" || true
            
            # Now safely add the values
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSIncludesSubdomains true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionAllowsInsecureHTTPLoads false" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionRequiresForwardSecrecy true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionMinimumTLSVersion TLSv1.2" "$PLIST_PATH"
          done
          
          echo "Updated Info.plist contents:"
          plutil -convert xml1 "$PLIST_PATH" -o -

      - name: Clean Build Environment
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"
      - name: Debug Signing Variables
        script: |
          echo "=== SIGNING VARIABLES DEBUG ==="
          echo "Distribution Certificate length: ${#DISTRIBUTION_CERTIFICATE}"
          echo "First 50 chars: ${DISTRIBUTION_CERTIFICATE:0:50}"
          echo "Provisioning Profile length: ${#PROVISIONING_PROFILE}"
          echo "First 50 chars: ${PROVISIONING_PROFILE:0:50}"
      - name: Decode signing assets
        script: |
          echo "=== SIGNING ASSETS DEBUG ==="
          
          # 1. Verify variables are available from the group
          echo "Checking environment variables:"
          if [[ -z "${DISTRIBUTION_CERTIFICATE+x}" ]]; then
            echo "❌ DISTRIBUTION_CERTIFICATE not set"
            echo "Available variables:"
            printenv
            exit 1
          fi
          
          if [[ -z "${PROVISIONING_PROFILE+x}" ]]; then
            echo "❌ PROVISIONING_PROFILE not set"
            exit 1
          fi
          
          if [[ -z "${CERTIFICATE_PASSWORD+x}" ]]; then
            echo "❌ CERTIFICATE_PASSWORD not set"
            exit 1
          fi
          
          # 2. Verify variables contain actual data (not just their names)
          if [[ "$DISTRIBUTION_CERTIFICATE" == \$DIST* ]] || 
            [[ "$PROVISIONING_PROFILE" == \$PROV* ]] || 
            [[ "$CERTIFICATE_PASSWORD" == \$CERT* ]]; then
            echo "❌ CRITICAL: Variables not properly injected!"
            echo "This means the 'Papricut' group isn't being properly loaded"
            echo "Please check:"
            echo "1. The variables exist in Codemagic UI"
            echo "2. They're in the 'Papricut' group"
            echo "3. The group name matches exactly (case-sensitive)"
            exit 1
          fi
          
          # 3. Decode files with robust error handling
          echo "=== DECODING FILES ==="
          rm -f signing.p12 "$PROFILE_NAME.mobileprovision"
          
          # Certificate
          echo "Decoding certificate (length: ${#DISTRIBUTION_CERTIFICATE})..."
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12 2>cert_err.txt || {
            echo "❌ Certificate decode failed"
            echo "Error: $(cat cert_err.txt)"
            echo "Certificate starts with: ${DISTRIBUTION_CERTIFICATE:0:50}"
            exit 1
          }
          
          # Profile
          echo "Decoding profile (length: ${#PROVISIONING_PROFILE})..."
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision" 2>prof_err.txt || {
            echo "❌ Profile decode failed"
            echo "Error: $(cat prof_err.txt)"
            echo "Profile starts with: ${PROVISIONING_PROFILE:0:50}"
            exit 1
          }
          
          echo "✅ Successfully decoded:"
          ls -la signing.p12 "$PROFILE_NAME.mobileprovision"

      - name: Install Provisioning Profile
        script: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

      - name: Setup Code Signing
        script: |
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Configure Pods Project
        script: |
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_ALLOWED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_REQUIRED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj

      - name: Increment Build Number
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"
      - name: Configure Xcode Build Settings
        script: |
          echo "=== CONFIGURING XCODE BUILD SETTINGS ==="
          
          # 1. Ensure the project file exists
          PBXPROJ_PATH="ios/App/App.xcodeproj/project.pbxproj"
          if [ ! -f "$PBXPROJ_PATH" ]; then
            echo "❌ Xcode project file not found"
            exit 1
          fi
          
          # 2. Add framework search paths (safe modification)
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:FRAMEWORK_SEARCH_PATHS string \$(inherited) \$(PROJECT_DIR)/Pods" "$PBXPROJ_PATH" || true
          
          # 3. Enable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES
          /usr/libexec/PlistBuddy -c "Set :objects:13D8C11F2543F3D900D83B1E:buildSettings:ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES YES" "$PBXPROJ_PATH"
          
          # 4. Set LD_RUNPATH_SEARCH_PATHS for static frameworks
          /usr/libexec/PlistBuddy -c "Set :objects:13D8C11F2543F3D900D83B1E:buildSettings:LD_RUNPATH_SEARCH_PATHS string \$(inherited) @executable_path/Frameworks" "$PBXPROJ_PATH"
          
          # 5. Verify changes
          echo "=== VERIFYING CHANGES ==="
          grep -A5 "FRAMEWORK_SEARCH_PATHS" "$PBXPROJ_PATH" || echo "No FRAMEWORK_SEARCH_PATHS found"
          grep -A5 "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES" "$PBXPROJ_PATH" || echo "No ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES found"
          
          echo "✅ Xcode build settings configured"
      - name: Configure Xcode Project for Static Frameworks
        script: |
          echo "=== CONFIGURING XCODE PROJECT FOR FRAMEWORK EMBEDDING ==="
          
          # 1. Add EMBEDDED_CONTENT_CONTAINS_SWIFT flag
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:EMBEDDED_CONTENT_CONTAINS_SWIFT string YES" ios/App/App.xcodeproj/project.pbxproj
          
          # 2. Ensure FRAMEWORK_SEARCH_PATHS includes Pods directory
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:FRAMEWORK_SEARCH_PATHS string \$(inherited) \$(PROJECT_DIR)/Pods" ios/App/App.xcodeproj/project.pbxproj
          
          # 3. Set ALWAYS_SEARCH_USER_PATHS to YES
          /usr/libexec/PlistBuddy -c "Set :objects:13D8C11F2543F3D900D83B1E:buildSettings:ALWAYS_SEARCH_USER_PATHS YES" ios/App/App.xcodeproj/project.pbxproj
          
          # 4. Verify changes
          echo "=== VERIFYING XCODE PROJECT CHANGES ==="
          grep -A5 "EMBEDDED_CONTENT_CONTAINS_SWIFT" ios/App/App.xcodeproj/project.pbxproj || echo "Warning: EMBEDDED_CONTENT_CONTAINS_SWIFT not found"
          grep -A5 "FRAMEWORK_SEARCH_PATHS" ios/App/App.xcodeproj/project.pbxproj || echo "Warning: FRAMEWORK_SEARCH_PATHS not found"
      - name: Build IPA (Robust Static Framework Support)
        script: |
          export NSUnbufferedIO=YES
          echo "=== BUILDING WITH STATIC FRAMEWORK SUPPORT ==="
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    SKIP_INSTALL=NO \
                    EMBEDDED_CONTENT_CONTAINS_SWIFT=YES \
                    ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=YES \
                    LD_RUNPATH_SEARCH_PATHS="@executable_path/Frameworks" \
                    ONLY_ACTIVE_ARCH=NO \
                    archive | tee "$HOME/build/archive_log.txt"

      - name: Validate Bundle (Updated for Static Frameworks)
        script: |
          echo "=== VALIDATING BUNDLE STRUCTURE ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          
          # Check binary size (should be > 10MB if frameworks are properly linked)
          BINARY_SIZE=$(stat -f%z "$APP_PATH/App")
          if [ "$BINARY_SIZE" -lt 10000000 ]; then
            echo "❌ App binary too small ($BINARY_SIZE bytes) - likely missing linked frameworks"
            exit 1
          fi
          
          # Check for web assets
          if [ ! -d "$APP_PATH/public" ]; then
            echo "❌ Web assets missing from $APP_PATH/public"
            exit 1
          fi
          
          # Check for required files (updated patterns)
          WEB_FILES=("index.html" "main.*.js" "runtime.*.js")
          for pattern in "${WEB_FILES[@]}"; do
            if ! ls "$APP_PATH/public/$pattern" >/dev/null 2>&1; then
              echo "❌ Missing web file pattern: $APP_PATH/public/$pattern"
              exit 1
            fi
          done
          
          # For static frameworks, check for linked binaries instead of framework directories
          echo "=== CHECKING FOR STATICALLY LINKED CAPACITOR ==="
          if ! nm "$APP_PATH/App" | grep -q "Capacitor"; then
            echo "❌ Capacitor not linked in binary"
            exit 1
          fi
          
          echo "✅ Bundle validated successfully"

      - name: Final Verification
        script: |
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Info.plist")"
          echo "Build Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$APP_PATH/Info.plist")"
          echo "Web Assets: $(find "$APP_PATH/public" -type f | wc -l) files"
          echo "Plugin Frameworks: $(find "$APP_PATH/Frameworks" -name "*.framework" | wc -l)"
          codesign -dv --verbose=4 "$APP_PATH"
          plutil -convert xml1 "$APP_PATH/Info.plist" -o - | xmllint --format -

    artifacts:
      - $HOME/build/ipa/*.ipa
      - $HOME/build/archive_log.txt
      - $HOME/build/export_log.txt
      - build.log
      - capacitor_sync.log
      - pod_install.log
      - node_modules_list.txt
      - angular.log
      - src/environments/
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true