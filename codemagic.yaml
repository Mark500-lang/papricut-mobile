workflows:
  ios-production:
    name: iOS Production Build
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "18.x"
        COCOAPODS_VERSION: "1.15.2"
      groups:
        - Papricut
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - ios/Pods
    triggering:
      events:
        - push
    scripts:
      # PHASE 1: CLEAN AND SETUP
      - name: Clean Workspace
        script: |
          echo "=== Cleaning Workspace ==="
          rm -rf node_modules ios/Pods ios/App/Pods
          npm cache clean --force

      # PHASE 2: DEPENDENCY INSTALLATION
      - name: Install Dependencies
        script: |
          set -ex
          echo "=== Installing Node Modules ==="
          npm ci
          
          echo "=== Verifying Capacitor Versions ==="
          npm list @capacitor/core @capacitor/cli @capacitor/ios
          npx cap doctor | grep -v "android" || true

      # PHASE 3: IOS PLATFORM CONFIGURATION
      - name: Configure iOS Project
        script: |
          echo "=== Syncing iOS Platform ==="
          npx cap sync ios --deployment
          
          echo "=== Generating Podfile ==="
          cd ios/App
          cat <<EOT > Podfile
          platform :ios, '13.0'
          use_frameworks! :linkage => :dynamic
          
          # Suppress CDN warning
          install! 'cocoapods', :warn_for_unused_master_specs_repo => false
          
          target 'App' do
            # Capacitor Core
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
            
            # Capacitor Plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorBrowser', :path => '../../node_modules/@capacitor/browser'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorFilesystem', :path => '../../node_modules/@capacitor/filesystem'
            pod 'CapacitorHaptics', :path => '../../node_modules/@capacitor/haptics'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
            pod 'CapacitorNetwork', :path => '../../node_modules/@capacitor/network'
            pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'
            pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
            pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                if target.name.start_with?('Capacitor')
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
                end
              end
            end
          end
          EOT
          
          echo "=== Installing Pods ==="
          pod repo update
          pod install --repo-update --clean-install
          
          echo "=== Verifying Capacitor Installation ==="
          # Check for Capacitor in expected locations
          if [ -d "../../node_modules/@capacitor/ios/Capacitor" ] || 
             [ -d "Pods/Capacitor" ] || 
             [ -d "${PODS_ROOT}/Capacitor" ]; then
            echo "✅ Capacitor installation verified"
            echo "Framework locations:"
            find Pods -name "Capacitor*" -type d
          else
            echo "❌ Capacitor installation failed!"
            echo "Checking node_modules:"
            ls -la ../../node_modules/@capacitor/ios
            echo "Checking Pods:"
            ls -la Pods/
            exit 1
          fi
      - name: Increment Build Number
        script: |
          set -ex
          echo "=== Incrementing Build Number ==="
          PLIST_PATH="ios/App/App/Info.plist"
          
          # Get current version and build numbers
          CURRENT_VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$PLIST_PATH")
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          
          # Increment build number (or set to 1 if empty)
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          
          echo "✅ Updated build number from $CURRENT_BUILD to $NEW_BUILD (Version $CURRENT_VERSION)"

      - name: Configure Signing
        script: |
          set -ex
          echo "=== Setting Up Signing ==="
          cd ios/App
          
          # Import certificates
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          
          # Extract provisioning profile UUID
          PROFILE_UUID=$(grep -a -A1 UUID profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          [ -n "$PROFILE_UUID" ] || { echo "❌ Failed to extract profile UUID"; exit 1; }
          
          # Set up keychain
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          # Create pod signing override file in project root
          echo "=== Configuring Pod Signing ==="
          cat <<EOT > disable-pod-signing.xcconfig
          CODE_SIGNING_ALLOWED = NO
          CODE_SIGNING_REQUIRED = NO
          PROVISIONING_PROFILE_SPECIFIER = ""
          DEVELOPMENT_TEAM = ""
          EOT
          
          # Update Pods xcconfig files with absolute path
          PODS_ROOT_ABS=$(pwd)/Pods
          find "Pods/Target Support Files" -name "*.*cconfig" | while read file; do
            echo "#include \"$(pwd)/disable-pod-signing.xcconfig\"" >> "$file"
          done
          
          # Fully convert to manual signing
          echo "=== Updating Project Settings ==="
          PBXPROJ="App.xcodeproj/project.pbxproj"
          cp "$PBXPROJ" "$PBXPROJ.bak"
          
          # Remove any automatic signing settings
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ"
          sed -i '' '/CODE_SIGN_STYLE/d' "$PBXPROJ"
          sed -i '' '/DEVELOPMENT_TEAM/d' "$PBXPROJ"
          
          # Add manual signing settings
          sed -i '' "/buildSettings = {/a \\
              CODE_SIGN_STYLE = Manual; \\
              PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\"; \\
              DEVELOPMENT_TEAM = H9A4H444G4; \\
              CODE_SIGN_IDENTITY = \"Apple Distribution\"; \\
              " "$PBXPROJ"
          
          echo "✅ Signing configuration complete"
      - name: Ensure Build Number Exists
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          
          # Initialize CFBundleVersion if missing
          if ! /usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH" &>/dev/null; then
            echo "Adding missing CFBundleVersion"
            /usr/libexec/PlistBuddy -c "Add CFBundleVersion string 1" "$PLIST_PATH"
          fi
          
          # Set version to 4.2.2 explicitly
          /usr/libexec/PlistBuddy -c "Set CFBundleShortVersionString 4.2.2" "$PLIST_PATH"
          
          # Increment build number
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          
          echo "Version set to: 4.2.2 (build $NEW_BUILD)"
      - name: Validate Build Environment
        script: |
          echo "=== Xcode Version ==="
          xcodebuild -version
          
          echo "=== Available Signing Identities ==="
          security find-identity -v -p codesigning
          
          echo "=== Provisioning Profile Info ==="
          security cms -D -i "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision" | grep -A1 -E 'ApplicationIdentifierPrefix|application-identifier'
          
          echo "=== Current Build Settings ==="
          cd ios/App
          xcodebuild -showBuildSettings | grep -i 'PROVISIONING_PROFILE\|BUNDLE_IDENTIFIER\|CODE_SIGN'
      - name: Build and Archive
        script: |
          set -ex
          cd ios/App
          
          # Clean previous builds
          rm -rf build/*
          
          # Verify provisioning profile exists
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          if [ ! -f "$PROFILE_PATH" ]; then
            echo "❌ Provisioning profile not found at: $PROFILE_PATH"
            exit 1
          fi
          
          # Extract bundle ID from profile for verification
          BUNDLE_ID=$(security cms -D -i "$PROFILE_PATH" | grep -aA1 application-identifier | grep string | sed 's/<string>//;s/<\/string>//' | awk -F'.' '{print $NF}')
          echo "Profile contains bundle ID: $BUNDLE_ID"
          
          # Build with corrected signing parameters
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            DEVELOPMENT_TEAM="H9A4H444G4" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            OTHER_CODE_SIGN_FLAGS="--deep" \
            clean archive
          
          # Verify archive exists
          if [ ! -d "build/App.xcarchive" ]; then
            echo "❌ Archive failed - no xcarchive created"
            exit 1
          fi
          
          # Verify embedded provisioning
          EMBEDDED_PROFILE="build/App.xcarchive/Products/Applications/App.app/embedded.mobileprovision"
          if [ ! -f "$EMBEDDED_PROFILE" ]; then
            echo "❌ No embedded provisioning profile found"
            echo "=== Debug Info ==="
            ls -la "build/App.xcarchive/Products/Applications/App.app/"
            exit 1
          fi
          
          # Final signing verification
          codesign -vvv --deep --strict "build/App.xcarchive/Products/Applications/App.app"
          echo "✅ Build successfully signed and validated"
      - name: Validate Archive
        script: |
          cd ios/App
          echo "=== Archive Validation ==="
          
          # Check signing
          codesign -dv --verbose=4 build/App.xcarchive/Products/Applications/App.app
          
          # Verify embedded provisioning profile
          EMBEDDED_PROFILE=build/App.xcarchive/Products/Applications/App.app/embedded.mobileprovision
          if [ ! -f "$EMBEDDED_PROFILE" ]; then
            echo "❌ No embedded provisioning profile found"
            exit 1
          fi
          
          # Verify entitlements
          codesign -d --entitlements - build/App.xcarchive/Products/Applications/App.app
          
          echo "✅ Archive validation passed"
      - name: Validate Embedded Frameworks
        script: |
          APP_PATH="ios/App/build/App.xcarchive/Products/Applications/App.app"
          
          # Check Capacitor core framework
          if [ ! -d "$APP_PATH/Frameworks/Capacitor.framework" ]; then
            echo "❌ Missing Capacitor.framework - app will crash on launch"
            exit 1
          fi
          
          # Verify web assets
          REQUIRED_WEB_ASSETS=(
            "public/index.html"
            "public/runtime-es2015.js"
            "public/main-es2015.js"
          )
          
          for asset in "${REQUIRED_WEB_ASSETS[@]}"; do
            if [ ! -f "$APP_PATH/$asset" ]; then
              echo "❌ Missing web asset: $asset"
              exit 1
            fi
          done
          
          echo "✅ All required frameworks and assets verified"
      - name: Verify Configuration
        script: |
          cd ios/App
          echo "=== Checking Configuration Files ==="
          find . -name "*.xcconfig" -exec grep -l "disable-pod-signing" {} \;
          echo "=== Current Signing Settings ==="
          xcodebuild -showBuildSettings -workspace App.xcworkspace -scheme App | grep -i signing
      - name: Export IPA
        script: |
          set -e
          echo "=== Exporting IPA ==="
          cd ios/App
          
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist ../../exportOptions.plist \
            -exportPath build/ipa
          
          echo "=== Verifying IPA ==="
          [ -f "build/ipa/App.ipa" ] || { echo "❌ IPA creation failed"; exit 1; }
      
      - name: Final Verification
        script: |
          set -ex
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="ios/App/build/App.xcarchive/Products/Applications/App.app"
          
          # 1. Basic Info.plist validation
          echo "--- App Metadata ---"
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Info.plist")"
          echo "Build Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$APP_PATH/Info.plist")"
          echo "Minimum OS: $(/usr/libexec/PlistBuddy -c "Print MinimumOSVersion" "$APP_PATH/Info.plist")"
          
          # 2. Code signing verification
          echo "--- Code Signing Verification ---"
          codesign -dv --verbose=4 "$APP_PATH"
          codesign --verify --verbose=4 "$APP_PATH"
          
          # 3. Critical file checks
          echo "--- Critical File Validation ---"
          check_file() {
            if [ -f "$1" ]; then
              echo "✅ Found: $1"
            else
              echo "❌ MISSING: $1"
              exit 1
            fi
          }
          
          # Capacitor core files
          check_file "$APP_PATH/Assets.car"
          check_file "$APP_PATH/Base.lproj/LaunchScreen.storyboardc"
          check_file "$APP_PATH/Frameworks/Capacitor.framework/Capacitor"
          check_file "$APP_PATH/Frameworks/CapacitorCordova.framework/CapacitorCordova"
          
          # Web assets check
          check_file "$APP_PATH/public/index.html"
          check_file "$APP_PATH/public/runtime-es2015.js"
          check_file "$APP_PATH/public/main-es2015.js"
          
          # 4. Plugin validation
          echo "--- Plugin Validation ---"
          PLUGINS_PATH="$APP_PATH/Plugins"
          if [ -d "$PLUGINS_PATH" ]; then
            echo "Found plugins:"
            ls -la "$PLUGINS_PATH"
          else
            echo "❌ No plugins directory found"
            exit 1
          fi
          
          # 5. Framework validation
          echo "--- Framework Validation ---"
          FRAMEWORKS_PATH="$APP_PATH/Frameworks"
          if [ -d "$FRAMEWORKS_PATH" ]; then
            echo "Framework count: $(find "$FRAMEWORKS_PATH" -type d -name "*.framework" | wc -l)"
            find "$FRAMEWORKS_PATH" -type d -name "*.framework" -exec sh -c 'echo "  - {}: $(file {}/$(basename -s .framework {}))"' \;
          else
            echo "❌ No frameworks directory found"
            exit 1
          fi
          
          # 6. Binary validation
          echo "--- Binary Validation ---"
          BINARY_PATH="$APP_PATH/App"
          if [ -f "$BINARY_PATH" ]; then
            echo "Binary architecture:"
            lipo -info "$BINARY_PATH"
            echo "Linked frameworks:"
            otool -L "$BINARY_PATH"
          else
            echo "❌ No binary found at $BINARY_PATH"
            exit 1
          fi
          
          echo "✅ All critical validations passed"
    artifacts:
      - ios/App/build/ipa/App.ipa
      - ios/App/xcodebuild.log

    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true