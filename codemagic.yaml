workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        APP_STORE_CONNECT_KEY_ID: $APP_STORE_CONNECT_KEY_ID 
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
        NODE_OPTIONS: "--max-old-space-size=4096"
      groups:
        - Papricut
    triggering:
      events:
        - push
    scripts:
      - name: Install System Dependencies
        script: |
          brew install jq
          npm install -g @angular/cli@17.3.17 @ionic/cli@7.2.1 native-run cordova-res

      - name: Clean Install Dependencies
        script: |
          # Clean slate
          echo "=== CLEANING ENVIRONMENT ==="
          rm -rf node_modules package-lock.json .angular/cache
          
          # Install core dependencies first
          echo "=== INSTALLING CORE DEPENDENCIES ==="
          npm install @angular/cli@17.3.17 @angular-devkit/build-angular@17.3.17 --save-dev --legacy-peer-deps --no-audit
          
          # Install remaining packages
          echo "=== INSTALLING REMAINING DEPENDENCIES ==="
          npm install --legacy-peer-deps --no-audit --force
          
          npm cache clean --force

          # Verify critical packages
          echo "=== VERIFYING INSTALLATIONS ==="
          npm list @angular-devkit/build-angular @ionic/angular-toolkit
          ng version
      - name: Verify and Repair Dependencies
        script: |
          # Check if angular-toolkit installed correctly
          if [ ! -d "node_modules/@ionic/angular-toolkit" ]; then
            echo "⚠️ Ionic Angular Toolkit missing - installing latest compatible version"
            npm install @ionic/angular-toolkit@latest --save-dev --legacy-peer-deps
          fi
          
          # Final verification
          npm list @ionic/angular-toolkit @angular-devkit/build-angular || exit 1
      - name: Verify Angular Builder
        script: |
          if [ ! -d "node_modules/@angular-devkit/build-angular" ]; then
            echo "❌ CRITICAL: Angular build tools still missing!"
            echo "Installed packages:"
            npm list --depth=0
            exit 1
          fi
      - name: Build Production Assets (Robust)
        script: |
          # Clean and verify environment
          echo "=== PRE-BUILD VERIFICATION ==="
          ls -la node_modules/@angular-devkit/build-angular || echo "❌ Angular builder missing!"
          
          # Production build with fallback
          echo "=== BUILDING PRODUCTION ASSETS ==="
          if ! npm run build -- --configuration production; then
            echo "⚠️ Primary build failed, attempting fallback..."
            ionic build --prod --verbose
          fi
          
          # Comprehensive asset verification
          echo "=== VERIFYING BUILD OUTPUT ==="
          if [ ! -d "www" ]; then
            echo "❌ Critical error: www directory not created"
            echo "Directory contents:"
            ls -la
            echo "Build logs:"
            cat angular.log || echo "No angular.log found"
            exit 1
          fi
          
          REQUIRED_ASSETS=(
            "index.html"
            "main.js"
            "polyfills.js"
            "runtime.js"
            "styles.css"
            "assets/"
            "favicon.ico"
            "manifest.webmanifest"
          )
          
          for asset in "${REQUIRED_ASSETS[@]}"; do
            if [ ! -e "www/$asset" ]; then
              echo "❌ Missing required asset: www/$asset"
              echo "www contents:"
              ls -la www/
              exit 1
            fi
          done

      - name: Verify Angular Configuration
        script: |
          if ! jq -e '.projects.app.architect.build.configurations.production' angular.json >/dev/null; then
            echo "❌ Missing production build config in angular.json"
            echo "Current configurations:"
            jq '.projects.app.architect.build.configurations' angular.json
            exit 1
          fi

      - name: Sync Capacitor (Robust)
        script: |
          echo "=== SYNCING WEB ASSETS TO IOS ==="
          npx cap sync ios --deployment
          npx cap copy ios
          
          # Verify iOS assets with multiple checks
          if [ ! -d "ios/App/App/public" ] && [ ! -d "ios/App/App/www" ]; then
            echo "❌ Capacitor sync failed - checking alternative locations..."
            find ios/App/App -name "index.html" || echo "No web assets found"
            exit 1
          fi
          
          echo "=== GENERATING NATIVE ASSETS ==="
          cordova-res ios --skip-config --copy
          npx cap sync ios

      - name: Clean Build Environment
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"

      - name: Decode Signing Assets
        script: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision"

      - name: Install Provisioning Profile
        script: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

      - name: Setup Code Signing
        script: |
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Configure Pods Project
        script: |
          # Disable code signing for Pods
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_ALLOWED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_REQUIRED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj

      - name: Increment Build Number
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"

      - name: Build IPA (Robust)
        script: |
          export NSUnbufferedIO=YES
          
          echo "=== ARCHIVING APP ==="
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    archive | tee "$HOME/build/archive_log.txt"

          echo "=== EXPORTING IPA ==="
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates | tee "$HOME/build/export_log.txt"

      - name: Validate Bundle (Comprehensive)
        script: |
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          
          # Verify web assets
          WEB_ASSET_PATH="$APP_PATH/www" || "$APP_PATH/public"
          if [ ! -d "$WEB_ASSET_PATH" ]; then
            echo "❌ Web assets missing from app bundle"
            echo "App bundle contents:"
            find "$APP_PATH" -maxdepth 2
            exit 1
          fi
          
          # Verify critical web files
          WEB_FILES=(
            "index.html"
            "main.js"
            "runtime.js"
            "styles.css"
          )
          
          for file in "${WEB_FILES[@]}"; do
            if [ ! -f "$WEB_ASSET_PATH/$file" ]; then
              echo "❌ Missing web file: $WEB_ASSET_PATH/$file"
              exit 1
            fi
          done
          
          # Verify native plugins
          REQUIRED_PLUGINS=(
            "Capacitor.framework"
            "CapacitorCordova.framework"
            "CapacitorCamera.framework"
          )
          
          for plugin in "${REQUIRED_PLUGINS[@]}"; do
            if [ ! -d "$APP_PATH/Frameworks/$plugin" ]; then
              echo "❌ Missing plugin framework: $plugin"
              echo "Existing frameworks:"
              ls -la "$APP_PATH/Frameworks/"
              exit 1
            fi
          done
          
          # Verify splash screen
          if [ ! -f "$APP_PATH/Base.lproj/LaunchScreen.storyboardc" ]; then
            echo "❌ Missing compiled splash screen"
            echo "Launch assets:"
            find "$APP_PATH" -name "*.storyboard*"
            exit 1
          fi

      - name: Final Verification
        script: |
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Info.plist")"
          echo "Build Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$APP_PATH/Info.plist")"
          echo "Web Assets: $(find "$APP_PATH/www" -type f | wc -l) files"
          echo "Plugin Frameworks: $(find "$APP_PATH/Frameworks" -name "*.framework" | wc -l)"
          codesign -dv --verbose=4 "$APP_PATH"
          plutil -convert xml1 "$APP_PATH/Info.plist" -o - | xmllint --format -

    artifacts:
      - $HOME/build/ipa/*.ipa
      - $HOME/build/archive_log.txt
      - $HOME/build/export_log.txt
      - build.log
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true