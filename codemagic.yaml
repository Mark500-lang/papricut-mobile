workflows:
  ios-production:
    name: iOS Production Build (Dynamic Linking) - Corrected V9
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        NODE_VERSION: "18.x"
        COCOAPODS_VERSION: "1.15.2"
      groups:
        - Papricut
    triggering:
      events:
        - push
    scripts:
      # PHASE 1: PROJECT VALIDATION
      - name: Validate Environment
        script: |
          echo "=== Verifying Critical Files ==="
          [ -f "exportOptions.plist" ] || { echo "❌ exportOptions.plist missing from root"; exit 1; }
          [ -f "ios/App/Podfile" ] || { echo "❌ Podfile missing"; exit 1; }
          [ -d "ios/App/App.xcworkspace" ] || { echo "❌ Xcode workspace missing"; exit 1; }

      # PHASE 2: DEPENDENCY SETUP
      - name: Install Dependencies
        script: |
          echo "=== Installing Node Modules ==="
          npm ci
          
          echo "=== Syncing Capacitor ==="
          npx cap sync ios
          
          echo "=== Ensuring Dynamic Linking and Modular Headers in Podfile ==="
          cd ios/App
          
          # Ensure the Podfile exists and is writable
          [ -f "Podfile" ] || { echo "❌ Podfile not found after cap sync"; exit 1; }

          # Remove any existing use_frameworks! or use_modular_headers! lines to prevent duplicates
          sed -i '' '/use_frameworks!/d' Podfile
          sed -i '' '/use_modular_headers!/d' Podfile

          # Add use_frameworks! :linkage => :dynamic and use_modular_headers! after platform declaration or at top
          # Using 'i' (insert) command with a newline character for better compatibility across sed versions
          if grep -q 'platform :ios' Podfile; then
            sed -i '' '/platform :ios/a \
            use_frameworks! :linkage => :dynamic\
            use_modular_headers!
            ' Podfile
                      else
                        sed -i '' '1i \
            use_frameworks! :linkage => :dynamic\
            use_modular_headers!
            ' Podfile
          fi

          # Explicitly add the Capacitor pod if it's not already there (npx cap sync should add it, but as a fallback)
          # This is a more robust way to ensure the pod is present, even if npx cap sync fails to add it correctly
          if ! grep -q 'pod \'Capacitor\'' Podfile; then
            echo "Adding 'pod \'Capacitor\'' to Podfile as a fallback."
            # Ensure it's added within a target block, or create one if none exists
            if grep -q 'target ' Podfile; then
              sed -i '' '/target /a \
              pod \'Capacitor\', :path => \'../../node_modules/@capacitor/ios\'
            ' Podfile
            else
              echo "\n# Fallback target for Capacitor\ntarget 'App' do\n  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'\nend" >> Podfile
            fi
          fi

          echo "=== Installing Pods ==="
          # Clean Pods directory and Podfile.lock before installing
          rm -rf Pods Podfile.lock
          pod cache clean --all
          pod install --repo-update --clean-install
          
          echo "=== Verifying Capacitor Pods ==="
          # The Capacitor.xcframework is typically located at Pods/Capacitor/Capacitor.xcframework
          # If it's not there, list contents for debugging.
          if [ -d "Pods/Capacitor/Capacitor.xcframework" ]; then
            echo "✅ Capacitor.xcframework found at expected location: Pods/Capacitor/Capacitor.xcframework"
          else
            echo "❌ Capacitor.xcframework not found at expected location: Pods/Capacitor/Capacitor.xcframework"
            echo "Listing contents of Pods/Capacitor for debugging:"
            ls -R Pods/Capacitor || echo "Pods/Capacitor directory does not exist or is empty."
            exit 1
          fi

      # PHASE 3: SIGNING SETUP
      - name: Configure Signing
        script: |
          echo "=== Setting Up Signing ==="
          cd ios/App
          
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          
          PROFILE_UUID=$(grep -a -A1 UUID profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          [ -n "$PROFILE_UUID" ] || { echo "❌ Failed to extract profile UUID"; exit 1; }
          
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
          plutil -replace 'objects.12D3D3C8240D3A2E000F3A2E.buildSettings.ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES' -string 'YES' App.xcodeproj/project.pbxproj
          plutil -replace 'objects.12D3D3C8240D3A2E000F3A2E.buildSettings.LD_RUNPATH_SEARCH_PATHS' -string '@executable_path/Frameworks' App.xcodeproj/project.pbxproj

      # PHASE 4: BUILD & VALIDATE
      - name: Build and Verify
        script: |
          echo "=== Building Archive ==="
          cd ios/App
          rm -rf build/*
          
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath build/App.xcarchive \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            DEVELOPMENT_TEAM="H9A4H444G4" \
            OTHER_SWIFT_FLAGS="$(echo -extra-xcconfig Pods/Target\ Support\ Files/Pods-App/Pods-App.release.xcconfig)" \
            clean archive | tee xcodebuild.log
          
          echo "=== Verifying Frameworks ==="
          ARCHIVE_PATH="build/App.xcarchive/Products/Applications/App.app"
          
          FRAMEWORKS=(
            "Capacitor.framework"
            "CapacitorCordova.framework"
            "CapacitorApp.framework"
            "CapacitorCamera.framework"
          )
          
          for framework in "${FRAMEWORKS[@]}"; do
            echo "Checking $framework..."
            [ -d "$ARCHIVE_PATH/Frameworks/$framework" ] || {
              echo "❌ Missing framework: $framework";
              echo "Directory contents:";
              ls -la "$ARCHIVE_PATH/Frameworks";
              exit 1;
            }
            
            file "$ARCHIVE_PATH/Frameworks/$framework/$framework" | grep -q 'dynamic library' || {
              echo "❌ Framework not dynamically linked: $framework";
              exit 1;
            }
            
            codesign -dv "$ARCHIVE_PATH/Frameworks/$framework" 2>&1 | grep -q "TeamIdentifier=H9A4H444G4" || {
              echo "❌ Framework signing failed: $framework";
              codesign -dv "$ARCHIVE_PATH/Frameworks/$framework";
              exit 1;
            }
          done
          
          grep -q 'CAPBridgeViewController' "$ARCHIVE_PATH/App" || {
            echo "❌ Potential splash screen hang risk - CAPBridge not found";
            exit 1;
          }

      # PHASE 5: EXPORT IPA
      - name: Export and Final Checks
        script: |
          echo "=== Exporting IPA ==="
          cd ios/App
          
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportOptionsPlist ../../exportOptions.plist \
            -exportPath build/ipa
          
          echo "=== Verifying IPA Contents ==="
          [ -f "build/ipa/App.ipa" ] || { echo "❌ IPA creation failed"; exit 1; }
          
          unzip -l build/ipa/App.ipa | grep -q "Payload/App.app/Frameworks/Capacitor.framework" || {
            echo "❌ Capacitor framework missing from IPA";
            exit 1;
          }
          
          unzip -l build/ipa/App.ipa | grep -q "Payload/App.app/public/index.html" || {
            echo "❌ Web assets missing from IPA";
            exit 1;
          }

    artifacts:
      - ios/App/build/ipa/App.ipa
      - ios/App/xcodebuild.log

    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true

