workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        APP_STORE_CONNECT_KEY_ID: $APP_STORE_CONNECT_KEY_ID 
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
      groups:
        - Papricut
    triggering:
      events:
        - push
    scripts:
      - name: Install dependencies
        script: |
          npm install -g @ionic/cli
          npm ci
          npm install

      - name: Clean build environment
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"

      - name: Build Ionic project
        script: |
          ionic build --prod
          npx cap sync ios
          npx cap update ios
          cd ios/App && pod install && cd ../..

      - name: Decode signing certificate and provisioning profile
        script: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision"

      - name: Install provisioning profile and certificate
        script: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Verify signing assets
        script: |
          echo "Provisioning Profile UUID: $PROFILE_UUID"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          security find-identity -v -p codesigning

      - name: Configure Pods project for automatic signing
        script: |
          # Disable code signing for all Pods targets
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_ALLOWED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_REQUIRED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj

      - name: Force Increment Build Number
        script: |
          # For iOS projects
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"
          cat "$PLIST_PATH" | grep -A 1 CFBundleVersion

      - name: Configure Capacitor for App Store
        script: |
          # Update Podfile for static linking
          sed -i '' $'1s|^|use_frameworks! :linkage => :static\\\n|' ios/App/Podfile
          
          # Add post_install hook if not present
          if ! grep -q "post_install" ios/App/Podfile; then
            echo -e "\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = '\$(PRODUCT_BUNDLE_IDENTIFIER)'\n      config.build_settings['MACH_O_TYPE'] = 'staticlib'\n    end\n  end\nend" >> ios/App/Podfile
          fi
          
          # Clean and update pods
          cd ios/App && pod deintegrate && pod install --repo-update
          cd ../..

      - name: Build .ipa with xcodebuild
        script: |
          # Build archive
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    archive

          # Export IPA using your existing ExportOptions.plist
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates
      - name: Validate App Bundle Contents
        script: |
          # 1. Verify www assets were bundled
          if ! unzip -l "$HOME/build/App.xcarchive/Products/Applications/App.app" | grep -q "www/index.html"; then
            echo "❌ Error: Web assets missing from app bundle"
            exit 1
          fi

          # 2. Check Capacitor plugins are properly embedded
          PLUGINS_COUNT=$(find "$HOME/build/App.xcarchive/Products/Applications/App.app/Frameworks" -name "Capacitor*.framework" | wc -l)
          if [ "$PLUGINS_COUNT" -lt 5 ]; then
            echo "❌ Error: Missing Capacitor plugins (found $PLUGINS_COUNT)"
            exit 1
          fi

          # 3. Verify Info.plist configuration
          PLIST_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app/Info.plist"
          if ! /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH"; then
            echo "❌ Error: Invalid Info.plist"
            exit 1
          fi

          echo "✅ All bundle validation checks passed"

      - name: Simulate First Launch
        script: |
          # Extract IPA for inspection
          unzip -q "$HOME/build/ipa/App.ipa" -d "$HOME/build/unpacked"
          
          # 1. Verify startup sequence
          echo "=== EXPECTED STARTUP FILES ==="
          ls -la "$HOME/build/unpacked/Payload/App.app/www"
          ls -la "$HOME/build/unpacked/Payload/App.app/Frameworks"
          
          # 2. Check for critical files
          REQUIRED_FILES=(
            "www/index.html"
            "www/main.js"
            "www/assets/"
            "Frameworks/Capacitor.framework"
            "Frameworks/CapacitorCordova.framework"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -e "$HOME/build/unpacked/Payload/App.app/$file" ]; then
              echo "❌ Missing critical file: $file"
              exit 1
            fi
          done
          
          echo "✅ All runtime files verified"
      - name: Build Completion Checklist
        script: |
          echo "=== BUILD VALIDATION CHECKLIST ==="
          echo "1. Web Assets: $(ls -la "$HOME/build/unpacked/Payload/App.app/www" | wc -l) files"
          echo "2. Plugins: $(find "$HOME/build/unpacked/Payload/App.app/Frameworks" -name "*.framework" | wc -l) frameworks"
          echo "3. Code Signing: $(codesign -dv "$HOME/build/unpacked/Payload/App.app" 2>&1 | grep -c "valid on disk")"
          echo "4. Bundle ID: $(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$HOME/build/unpacked/Payload/App.app/Info.plist")"
          echo "5. Minimum OS: $(/usr/libexec/PlistBuddy -c "Print :MinimumOSVersion" "$HOME/build/unpacked/Payload/App.app/Info.plist")"
          echo "=== BUILD SUCCESSFUL ==="
    artifacts:
      - $HOME/build/ipa/*.ipa
    publishing:
      app_store_connect:
        auth: integration 
        api_key: Codemagic-key  # Must match the integration name
        submit_to_testflight: true
