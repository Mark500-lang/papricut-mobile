workflows:
  ios-distribute:
    name: iOS Distribute Workflow
    environment:
      vars:
        XCODE_PROJECT: "ios/App.xcodeproj"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        APP_STORE_CONNECT_USERNAME: $APP_STORE_CONNECT_USERNAME
      groups:
        - Papricut
    triggering:
      events:
        - push
    scripts:
      - name: Set up keychain and code signing
        script: |
          set -e
          echo "=== üöÄ Starting Keychain and Code Signing Setup ==="

          # Validate env variables
          if [ -z "$DISTRIBUTION_CERTIFICATE" ]; then
            echo "‚ùå ERROR: DISTRIBUTION_CERTIFICATE is missing"
            exit 1
          fi

          if [ -z "$CERTIFICATE_PASSWORD" ]; then
            echo "‚ùå ERROR: CERTIFICATE_PASSWORD is missing"
            exit 1
          fi

          if [ -z "$PROVISIONING_PROFILE" ]; then
            echo "‚ùå ERROR: PROVISIONING_PROFILE is missing"
            exit 1
          fi

          echo "‚úÖ Environment variables loaded"

          # Decode files
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > certificate.p12 || {
            echo "‚ùå Failed to decode DISTRIBUTION_CERTIFICATE"
            exit 1
          }
          echo "‚úÖ certificate.p12 decoded"

          echo "$PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision || {
            echo "‚ùå Failed to decode PROVISIONING_PROFILE"
            exit 1
          }
          echo "‚úÖ profile.mobileprovision decoded"

          # Set up the keychain
          echo "üîê Creating build.keychain..."
          security create-keychain -p "" build.keychain || echo "‚ö†Ô∏è Keychain exists"

          echo "üîì Unlocking keychain..."
          security unlock-keychain -p "" build.keychain

          echo "‚≠ê Setting default keychain..."
          security default-keychain -s build.keychain

          echo "üì• Importing certificate..."
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign || {
            echo "‚ùå Failed to import certificate. Wrong password or corrupted .p12"
            exit 1
          }
          echo "‚úÖ Certificate imported"

          echo "üìã Copying provisioning profile to correct location..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "‚úÖ Provisioning profile copied"

          echo "üéâ Setup completed successfully"


      - name: Install dependencies
        script: |
          set -e
          echo "üì¶ Installing dependencies..."
          npm install -g @ionic/cli
          npm ci

      - name: Build Ionic project
        script: |
          set -e
          echo "‚öôÔ∏è Building Ionic project..."
          ionic build --prod || { echo "‚ùå Ionic build failed"; exit 1; }
          npx cap sync ios || { echo "‚ùå Capacitor sync failed"; exit 1; }

      - name: Build .ipa with xcodebuild
        script: |
          set -e
          echo "üì± Archiving project with xcodebuild..."
          xcodebuild -workspace ios/App.xcworkspace \
                     -scheme "$XCODE_SCHEME" \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath $HOME/build/App.xcarchive \
                     archive || { echo "‚ùå xcodebuild archive failed"; exit 1; }

          echo "üì¶ Exporting .ipa..."
          xcodebuild -exportArchive \
                     -archivePath $HOME/build/App.xcarchive \
                     -exportOptionsPlist ExportOptions.plist \
                     -exportPath $HOME/build/ipa || { echo "‚ùå xcodebuild export failed"; exit 1; }

      - name: Upload to App Store
        script: |
          set -e
          echo "üöÄ Uploading to App Store..."

          IPA_PATH=$(find $HOME/build/ipa -name "*.ipa" | head -n 1)
          if [ ! -f "$IPA_PATH" ]; then
            echo "‚ùå .ipa file not found. Upload aborted."
            exit 1
          fi

          if [ -z "$APP_STORE_CONNECT_USERNAME" ] || [ -z "$APP_SPECIFIC_PASSWORD" ]; then
            echo "‚ùå Missing App Store Connect credentials"
            exit 1
          fi

          xcrun altool --upload-app -f "$IPA_PATH" \
                       -t ios \
                       -u "$APP_STORE_CONNECT_USERNAME" \
                       -p "$APP_SPECIFIC_PASSWORD" || {
            echo "‚ùå Upload to App Store failed"
            exit 1
          }

    artifacts:
      - build/ipa/*.ipa
