workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        APP_STORE_CONNECT_KEY_ID: $APP_STORE_CONNECT_KEY_ID 
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
      groups:
        - Papricut
    triggering:
      events:
        - push
    scripts:
      - name: Install dependencies
        script: |
          npm install -g @ionic/cli
          npm ci
          npm install

      - name: Clean build environment
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"

      - name: Build Ionic Project
        script: |
          # 1. Clean with verification
          echo "=== CLEANING PREVIOUS BUILDS ==="
          rm -rf www dist node_modules/.cache
          ls -la
          
          # 2. Install with verbose output
          echo "=== VERIFYING DEPENDENCIES ==="
          npm ci --loglevel verbose
          
          # 3. Production build with full logging
          echo "=== STARTING PRODUCTION BUILD ==="
          ionic build --prod \
            --verbose \
            -- --output-hashing=all \
            2>&1 | tee build.log
          
          # 4. Verify build artifacts
          echo "=== VERIFYING BUILD OUTPUT ==="
          if [ ! -d "www" ]; then
            echo "❌ Ionic build failed - www directory missing"
            echo "=== BUILD LOG ==="
            cat build.log
            echo "=== FILE LIST ==="
            ls -la
            echo "=== ANGULAR CACHE ==="
            ls -la .angular/cache
            exit 1
          fi
          
          # 5. Verify critical files
          REQUIRED_FILES=(
            "www/index.html"
            "www/main.js"
            "www/polyfills.js"
            "www/styles.css"
          )
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              echo "=== WWW DIRECTORY CONTENTS ==="
              find www -type f
              exit 1
            fi
          done
          
          # 6. Sync Capacitor with validation
          echo "=== SYNCING IOS PLATFORM ==="
          npx cap sync ios --verbose
          if [ ! -d "ios/App/App/public" ]; then
            echo "❌ Capacitor sync failed - public directory missing"
            echo "=== IOS APP DIRECTORY ==="
            ls -la ios/App/App
            exit 1
          fi
          
          # 7. Install pods with checks
          echo "=== INSTALLING COCOAPODS ==="
          cd ios/App
          pod install --repo-update --verbose
          cd ../..

      - name: Decode signing certificate and provisioning profile
        script: |
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision"

      - name: Install provisioning profile and certificate
        script: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Verify signing assets
        script: |
          echo "Provisioning Profile UUID: $PROFILE_UUID"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          security find-identity -v -p codesigning

      - name: Configure Pods project for automatic signing
        script: |
          # Disable code signing for all Pods targets
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_ALLOWED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj
          /usr/libexec/PlistBuddy -c "Add :objects:13D8C11F2543F3D900D83B1E:buildSettings:CODE_SIGNING_REQUIRED string NO" ios/App/Pods/Pods.xcodeproj/project.pbxproj

      - name: Force Increment Build Number
        script: |
          # For iOS projects
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"
          cat "$PLIST_PATH" | grep -A 1 CFBundleVersion

      - name: Configure Capacitor for App Store
        script: |
          # Update Podfile for static linking
          sed -i '' $'1s|^|use_frameworks! :linkage => :static\\\n|' ios/App/Podfile
          
          # Add post_install hook if not present
          if ! grep -q "post_install" ios/App/Podfile; then
            echo -e "\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = '\$(PRODUCT_BUNDLE_IDENTIFIER)'\n      config.build_settings['MACH_O_TYPE'] = 'staticlib'\n    end\n  end\nend" >> ios/App/Podfile
          fi
          
          # Clean and update pods
          cd ios/App && pod deintegrate && pod install --repo-update
          cd ../..

      - name: Build .ipa with xcodebuild
        script: |
          # Enable verbose logging
          export NSUnbufferedIO=YES
          
          echo "=== BUILDING ARCHIVE ==="
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    archive | tee "$HOME/build/archive_log.txt"

          echo "=== EXPORTING IPA ==="
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates | tee "$HOME/build/export_log.txt"

      - name: Verify Web Assets
        script: |
          # Check Angular production build
          if [ ! -f "www/index.html" ]; then
            echo "❌ Missing index.html in www"
            find www -type f
            exit 1
          fi
          
          # Check required JS bundles
          REQUIRED_JS=("main" "polyfills" "runtime")
          for js in "${REQUIRED_JS[@]}"; do
            if ! compgen -G "www/$js*.js" > /dev/null; then
              echo "❌ Missing $js*.js in www"
              exit 1
            fi
          done

      - name: Validate Bundle Contents
        script: |
          echo "=== VALIDATING APP BUNDLE ==="
          
          # 1. Verify www directory structure
          WWW_DIR="$HOME/build/App.xcarchive/Products/Applications/App.app/www"
          if [ ! -d "$WWW_DIR" ]; then
            WWW_DIR="$HOME/build/App.xcarchive/Products/Applications/App.app/public"
            if [ ! -d "$WWW_DIR" ]; then
              echo "❌ CRITICAL: Missing web assets directory (tried www/ and public/)"
              find "$HOME/build/App.xcarchive/Products/Applications/App.app" -maxdepth 1
              exit 1
            fi
          fi
          
          echo "✅ Found web assets at: $WWW_DIR"
          ls -la "$WWW_DIR"
          
          # 2. Check critical web assets
          REQUIRED_WEB_FILES=(
            "index.html"
            "main.js"
            "polyfills.js"
            "runtime.js"
            "styles.css"
            "assets/"
          )
          
          for file in "${REQUIRED_WEB_FILES[@]}"; do
            if [ ! -e "$WWW_DIR/$file" ]; then
              echo "❌ MISSING FILE: www/$file"
              exit 1
            fi
            echo "✅ Found www/$file"
          done
          
          # 3. Verify Capacitor plugins
          PLUGINS=(
            "Capacitor.framework"
            "CapacitorCordova.framework"
            "CapacitorCamera.framework"
            "CapacitorDevice.framework"
          )
          
          for plugin in "${PLUGINS[@]}"; do
            if [ ! -d "$HOME/build/App.xcarchive/Products/Applications/App.app/Frameworks/$plugin" ]; then
              echo "❌ MISSING PLUGIN: $plugin"
              exit 1
            fi
            echo "✅ Found $plugin"
          done
      - name: Check Capacitor Config
        script: |
          if [ "$(jq -r '.webDir' capacitor.config.json)" != "www" ]; then
            echo "❌ webDir not set to 'www' in capacitor.config.json"
            exit 1
          fi
      - name: Verify File Permissions
        script: |
          if [ ! -r "www" ] || [ ! -x "www" ]; then
            echo "❌ www directory not readable/executable"
            ls -ld www
            exit 1
          fi
      - name: Verify Code Signing
        script: |
          echo "=== CODE SIGNING VERIFICATION ==="
          codesign -dv --verbose=4 "$HOME/build/App.xcarchive/Products/Applications/App.app"
          
          # Verify provisioning profile
          EMBEDDED_PROFILE="$HOME/build/App.xcarchive/Products/Applications/App.app/embedded.mobileprovision"
          if [ ! -f "$EMBEDDED_PROFILE" ]; then
            echo "❌ No embedded provisioning profile found"
            exit 1
          fi
          
          echo "✅ Provisioning profile:"
          security cms -D -i "$EMBEDDED_PROFILE" | grep -E '(Name|UUID|ExpirationDate)'

      - name: Final Build Report
        script: |
          echo "=== BUILD VALIDATION REPORT ==="
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$HOME/build/App.xcarchive/Products/Applications/App.app/Info.plist")"
          echo "Build Number: $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$HOME/build/App.xcarchive/Products/Applications/App.app/Info.plist")"
          echo "Bundle ID: $(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$HOME/build/App.xcarchive/Products/Applications/App.app/Info.plist")"
          echo "Minimum iOS: $(/usr/libexec/PlistBuddy -c "Print :MinimumOSVersion" "$HOME/build/App.xcarchive/Products/Applications/App.app/Info.plist")"
          echo "Web Assets: $(find "$HOME/build/App.xcarchive/Products/Applications/App.app/www" -type f | wc -l) files"
          echo "Native Plugins: $(find "$HOME/build/App.xcarchive/Products/Applications/App.app/Frameworks" -name "*.framework" | wc -l) frameworks"
          echo "Code Signing: $(codesign -dv "$HOME/build/App.xcarchive/Products/Applications/App.app" 2>&1 | grep -c "valid on disk")"
          echo "=== BUILD VALIDATION COMPLETE ==="

    artifacts:
      - $HOME/build/ipa/*.ipa
      - $HOME/build/archive_log.txt
      - $HOME/build/export_log.txt
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true
