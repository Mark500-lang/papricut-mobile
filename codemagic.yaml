workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        NODE_OPTIONS: "--max-old-space-size=4096"
        NODE_VERSION: "18.x"
        NVM_DIR: "/Users/builder/.nvm"
        CAPACITOR_STATIC_LIBS_DIR: "${CM_BUILD_DIR}/ios/App/StaticLibs"
      groups:
        - Papricut
    triggering:
      events:
        - push
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - .angular/cache
        - ios/App/Pods
    scripts:
      - name: Complete Build Environment Cleanup
        script: |
          echo "=== COMPLETE BUILD ENVIRONMENT CLEANUP ==="
          
          # Xcode caches
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          rm -rf ~/Library/Developer/Xcode/Archives/*
          
          # Pods reset
          rm -rf ios/App/Podfile.lock
          rm -rf ios/App/.symlinks
          
          # Node/npm cleanup
          rm -rf node_modules
          rm -rf package-lock.json
          rm -rf .angular/cache
          
          # Capacitor iOS platform reset
          rm -rf ios/App/App/public
          rm -rf ios/App/App.xcworkspace/xcuserdata
          rm -rf ios/App/App.xcodeproj/xcuserdata
          
          # Static libs cleanup
          rm -rf "$CAPACITOR_STATIC_LIBS_DIR"
          mkdir -p "$CAPACITOR_STATIC_LIBS_DIR"

      - name: Install and Use Node 18
        script: |
          echo "=== INSTALLING NODE 18 ==="
          curl -o node.pkg https://nodejs.org/dist/v18.20.2/node-v18.20.2.pkg
          sudo installer -pkg node.pkg -target /
          rm node.pkg
          
          # Set up npm
          mkdir -p ~/.npm-global
          npm config set prefix '~/.npm-global'
          export PATH=~/.npm-global/bin:$PATH
          echo "export PATH=~/.npm-global/bin:\$PATH" >> ~/.zshrc
          echo "export PATH=~/.npm-global/bin:\$PATH" >> ~/.bashrc
          
          # Install tools
          npm install -g npm@8.19.4
          npm install -g @angular/cli@17.3.17 --force
          npm install -g @ionic/cli@7.2.1 native-run cordova-res
          
          # Install CocoaPods
          gem install cocoapods -v 1.15.2 --conservative
          
          # Verify
          echo "=== INSTALLATION VERIFICATION ==="
          echo "Node: $(node -v)"
          echo "npm: $(npm -v)"
          echo "Angular CLI: $(ng version | head -n 1)"

      - name: Install Dependencies
        script: |
          echo "=== INSTALLING DEPENDENCIES ==="
          npm install --legacy-peer-deps --no-audit
          npm install --save-exact @angular-devkit/build-angular@17.3.17 @ionic/angular-toolkit@7.1.1
          
          if [ ! -d "node_modules/@angular-devkit/build-angular" ]; then
            echo "❌ Angular build tools missing!"
            exit 1
          fi

      - name: Verify Capacitor Plugins
        script: |
          echo "=== CAPACITOR PLUGIN CHECK ==="
          REQUIRED_PLUGINS=(
            "@capacitor/core" 
            "@capacitor/ios"
            "@capacitor/camera"
            "@capacitor/keyboard"
          )
          
          for plugin in "${REQUIRED_PLUGINS[@]}"; do
            if [ ! -d "node_modules/$plugin" ]; then
              echo "❌ Missing plugin: $plugin"
              exit 1
            fi
          done

      - name: Build Angular App
        script: |
          echo "=== BUILDING PRODUCTION ASSETS ==="
          export PATH=~/.npm-global/bin:$PATH
          ng build --configuration production --output-path www --verbose 2>&1 | tee angular.log
          
          if [ ! -d "www" ]; then
            echo "❌ Build failed - www directory not created"
            grep -i "error" angular.log || echo "No error messages found"
            exit 1
          fi

      - name: Configure Podfile with Static Setup
        script: |
          echo "=== CONFIGURING PODFILE ==="
          cat << 'EOF' > ios/App/Podfile
          require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'
          platform :ios, '13.0'
          use_frameworks! :linkage => :static

          target 'App' do
            # Core Capacitor
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios', :modular_headers => true
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios', :modular_headers => true
            
            # Capacitor plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorDevice', :path => '../../node_modules/@capacitor/device'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
            pod 'CapacitorSplashScreen', :path => '../../node_modules/@capacitor/splash-screen'
            pod 'CapacitorStatusBar', :path => '../../node_modules/@capacitor/status-bar'
          end

          post_install do |installer|
            # Create headers directory
            capacitor_headers_dir = File.join(installer.sandbox.root, 'Headers/Public/Capacitor')
            FileUtils.mkdir_p(capacitor_headers_dir)

            # Copy ALL headers from Capacitor
            Dir.glob(File.join('../../node_modules/@capacitor/ios/Capacitor/Capacitor', '*.h')).each do |header|
              FileUtils.cp(header, capacitor_headers_dir)
            end

            # Create modulemap
            File.write(File.join(capacitor_headers_dir, 'module.modulemap'), <<-MODULEMAP)
              framework module Capacitor {
                umbrella header "Capacitor.h"
                export *
                module * { export * }
              }
            MODULEMAP

            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                # Essential static framework settings
                config.build_settings['MACH_O_TYPE'] = 'staticlib'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['SKIP_INSTALL'] = 'NO'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                
                # Capacitor-specific settings
                if target.name == 'Capacitor'
                  config.build_settings['DEFINES_MODULE'] = 'YES'
                  config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
                  config.build_settings['OTHER_CFLAGS'] = '-fmodule-map-file=${PODS_ROOT}/Headers/Public/Capacitor/module.modulemap'
                  config.build_settings['HEADER_SEARCH_PATHS'] = '$(inherited) ${PODS_ROOT}/Headers/Public/Capacitor'
                  config.build_settings['SWIFT_INCLUDE_PATHS'] = '$(inherited) ${PODS_ROOT}/Headers/Public/Capacitor'
                end
              end
            end

            # Xcode 16.4 compatibility
            installer.pods_project.build_configurations.each do |config|
              config.build_settings.delete('VALID_ARCHS')
              config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
              config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
            end
          end
          EOF

      - name: Install Pods with Static Framework Support
        script: |
          echo "=== INSTALLING PODS ==="
          cd ios/App
          pod install --repo-update
          
          # Verify Pods were installed
          if [ ! -d "Pods" ]; then
            echo "❌ Pods directory not created"
            exit 1
          fi

      - name: Build Capacitor Static Library
        script: |
          echo "=== BUILDING CAPACITOR STATIC LIBRARY ==="
          cd ios/App
          
          xcodebuild \
            -workspace App.xcworkspace \
            -scheme Capacitor \
            -configuration Release \
            -sdk iphoneos \
            -derivedDataPath DerivedData \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            MACH_O_TYPE=staticlib \
            ONLY_ACTIVE_ARCH=NO \
            SKIP_INSTALL=NO \
            CONFIGURATION_BUILD_DIR="$CAPACITOR_STATIC_LIBS_DIR" \
            clean build | tee capacitor_build.log
          
          # Verify static library was created
          if [ ! -f "$CAPACITOR_STATIC_LIBS_DIR/libCapacitor.a" ]; then
            echo "❌ Failed to build Capacitor static library"
            grep -i "error" capacitor_build.log || echo "No error messages found"
            exit 1
          fi
          
          echo "✅ Capacitor static library built successfully"

      - name: Sync Capacitor iOS Project
        script: |
          echo "=== SYNCING CAPACITOR IOS ==="
          npx cap sync ios
          
          if [ ! -d "ios/App/App/public" ]; then
            echo "ℹ️ Copying www content manually"
            mkdir -p ios/App/App/public
            cp -R www/* ios/App/App/public/
          fi

      - name: Update Info.plist
        script: |
          echo "=== UPDATING INFO.PLIST ==="
          PLIST_PATH="ios/App/App/Info.plist"
          
          /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity dict" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains dict" "$PLIST_PATH" 2>/dev/null || true
          
          for domain in "api.papricut.com" "cdn.papricut.com"; do
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains:${domain} dict" "$PLIST_PATH" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSIncludesSubdomains true" "$PLIST_PATH" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionMinimumTLSVersion string TLSv1.2" "$PLIST_PATH" 2>/dev/null || true
          done

      - name: Setup Code Signing
        script: |
          echo "=== SETTING UP CODE SIGNING ==="
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision"
          
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV
          
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Configure Pods Signing
        script: |
          echo "=== CONFIGURING PODS SIGNING ==="
          find ios/App/Pods -name project.pbxproj | while read pbxproj; do
            sed -i '' 's/CODE_SIGNING_ALLOWED = .*/CODE_SIGNING_ALLOWED = NO;/g' "$pbxproj"
            sed -i '' 's/CODE_SIGNING_REQUIRED = .*/CODE_SIGNING_REQUIRED = NO;/g' "$pbxproj"
          done

      - name: Increment Build Number
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"

      - name: Build IPA
        script: |
          echo "=== BUILDING IPA ==="
          export NSUnbufferedIO=YES
          
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -sdk iphoneos \
            -configuration Release \
            -archivePath "$HOME/build/App.xcarchive" \
            -allowProvisioningUpdates \
            -destination 'generic/platform=iOS' \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
            ENABLE_BITCODE=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            SKIP_INSTALL=NO \
            OTHER_LDFLAGS="-ObjC -all_load -lCapacitor -lCapacitorCordova" \
            LIBRARY_SEARCH_PATHS="\$(inherited) $CAPACITOR_STATIC_LIBS_DIR ${PODS_CONFIGURATION_BUILD_DIR}/Capacitor ${PODS_CONFIGURATION_BUILD_DIR}/CapacitorCordova" \
            FRAMEWORK_SEARCH_PATHS="\$(inherited) $CAPACITOR_STATIC_LIBS_DIR ${PODS_ROOT}/Capacitor ${PODS_ROOT}/CapacitorCordova" \
            LD_RUNPATH_SEARCH_PATHS="@executable_path/Frameworks" \
            ONLY_ACTIVE_ARCH=NO \
            GCC_PREPROCESSOR_DEFINITIONS="\$(inherited) CAPACITOR_ENABLE_STATIC_FRAMEWORK=1 CAPACITOR_USE_STATIC=1" \
            SWIFT_INCLUDE_PATHS="${PODS_ROOT}/Headers/Public/Capacitor" \
            CLANG_ENABLE_MODULES=YES \
            HEADER_SEARCH_PATHS="\$(inherited) ${PODS_ROOT}/Headers/Public/Capacitor" \
            archive | tee "$HOME/build/xcodebuild.log"
          
          if [ ! -d "$HOME/build/App.xcarchive" ]; then
            echo "❌ Archive creation failed"
            grep -A10 "error:" "$HOME/build/xcodebuild.log" || echo "No error details found"
            exit 1
          fi

      - name: Export IPA
        script: |
          echo "=== EXPORTING IPA ==="
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates | tee "$HOME/build/export_log.txt"
          
          if [ ! -f "$HOME/build/ipa/App.ipa" ]; then
            echo "❌ IPA export failed"
            grep "error:" "$HOME/build/export_log.txt" || echo "No explicit errors found"
            exit 1
          fi

      - name: Final Verification
        script: |
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          
          # Verify Capacitor is statically linked
          if ! nm "$APP_PATH/App" 2>/dev/null | grep -q "Capacitor"; then
            echo "❌ Capacitor symbols not found - static linking failed"
            exit 1
          fi
          
          # Verify binary size
          BINARY_SIZE=$(stat -f%z "$APP_PATH/App")
          echo "Binary size: $BINARY_SIZE bytes"
          
          codesign -dv --verbose=4 "$APP_PATH"

    artifacts:
      - $HOME/build/xcodebuild.log
      - $HOME/build/export_log.txt
      - $HOME/build/ipa/*.ipa
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true