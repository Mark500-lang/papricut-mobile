workflows:
  ios-distribute:
    name: iOS Distribute (Manual Signing)
    integrations:
      app_store_connect: Codemagic-key
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        PROFILE_NAME: "Papricut_AppStore_2025"
        NODE_OPTIONS: "--max-old-space-size=4096"
        NODE_VERSION: "18.x"
        NVM_DIR: "/Users/builder/.nvm"
      groups:
        - Papricut
    triggering:
      events:
        - push
    cache:
      cache_paths:
        - ~/.npm
        - node_modules
        - .angular/cache
    scripts:
      - name: Complete Build Environment Cleanup
        script: |
          echo "=== COMPLETE BUILD ENVIRONMENT CLEANUP ==="
          # Xcode caches
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          
          # Pods reset
          rm -rf ios/App/Pods
          rm -rf ios/App/Podfile.lock
          
          # Node cleanup
          rm -rf node_modules
          rm -rf .angular/cache
          
          # Capacitor iOS platform reset
          rm -rf ios/App/App/public
          rm -rf ios/App/App.xcworkspace/xcuserdata
          
          echo "✅ Environment cleaned"

      - name: Install and Use Node 18
        script: |
          echo "=== INSTALLING NODE 18 ==="
          
          # 1. Install Node.js using Codemagic's preferred method (not nvm)
          echo "Installing Node.js 18 directly..."
          curl -o node.pkg https://nodejs.org/dist/v18.20.2/node-v18.20.2.pkg
          sudo installer -pkg node.pkg -target /
          rm node.pkg
          
          # 2. Set up npm with correct permissions
          echo "Configuring npm..."
          mkdir -p ~/.npm-global
          npm config set prefix '~/.npm-global'
          export PATH=~/.npm-global/bin:$PATH
          echo "export PATH=~/.npm-global/bin:\$PATH" >> ~/.zshrc
          echo "export PATH=~/.npm-global/bin:\$PATH" >> ~/.bashrc
          
          # 3. Install specific npm version
          npm install -g npm@8.19.4
          
          # 4. Install Angular CLI with exact version
          echo "Installing Angular CLI..."
          npm install -g @angular/cli@17.3.17 --force
          
          # 5. Verify Angular CLI installation
          NG_PATH=~/.npm-global/bin/ng
          if [ ! -f "$NG_PATH" ]; then
            echo "❌ Angular CLI installation failed - binary not found"
            echo "Global npm packages:"
            npm list -g --depth=0
            exit 1
          fi
          
          # 6. Install other required tools
          npm install -g @ionic/cli@7.2.1 native-run cordova-res
          
          # 7. Install CocoaPods
          gem install cocoapods -v 1.15.2 --conservative
          
          # 8. Verify installations
          echo "=== INSTALLATION VERIFICATION ==="
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Angular CLI version: $(~/.npm-global/bin/ng version | head -n 1)"
          echo "Angular CLI path: $(which ng || echo 'Not in PATH')"
          echo "Full PATH: $PATH"

      - name: Install Dependencies
        script: |
          echo "=== INSTALLING DEPENDENCIES ==="
          npm install --legacy-peer-deps --no-audit
          npm install --save-exact @angular-devkit/build-angular@17.3.17 @ionic/angular-toolkit@7.1.1
          
          if [ ! -d "node_modules/@angular-devkit/build-angular" ]; then
            echo "❌ CRITICAL: Angular build tools missing!"
            npm list
            exit 1
          fi

      - name: Verify Capacitor Plugins
        script: |
          echo "=== CAPACITOR PLUGIN CHECK ==="
          REQUIRED_PLUGINS=(
            "@capacitor/core" 
            "@capacitor/ios"
            "@capacitor/camera"
            "@capacitor/keyboard"
          )
          
          for plugin in "${REQUIRED_PLUGINS[@]}"; do
            if [ ! -d "node_modules/$plugin" ]; then
              echo "❌ Missing plugin: $plugin"
              exit 1
            fi
          done

      - name: Build Angular App
        script: |
          echo "=== BUILDING PRODUCTION ASSETS ==="
          
          # Ensure PATH is set correctly
          export PATH=~/.npm-global/bin:$PATH
          
          # Verify ng command is available
          if ! command -v ng &> /dev/null; then
            echo "❌ Angular CLI not found in PATH"
            echo "Current PATH: $PATH"
            echo "Attempting direct path..."
            ~/.npm-global/bin/ng build --configuration production --output-path www --verbose 2>&1 | tee angular.log
          else
            ng build --configuration production --output-path www --verbose 2>&1 | tee angular.log
          fi
          
          # Verify build output
          if [ ! -d "www" ]; then
            echo "❌ Build failed - www directory not created"
            echo "=== BUILD ERRORS ==="
            grep -i "error" angular.log || echo "No error messages found"
            exit 1
          fi
          
          # Verify critical files
          REQUIRED_FILES=(
            "www/index.html"
            "www/main.*.js"
            "www/runtime.*.js"
          )
          
          for pattern in "${REQUIRED_FILES[@]}"; do
            if ! ls $pattern >/dev/null 2>&1; then
              echo "❌ Missing web file: $pattern"
              echo "www directory contents:"
              ls -la www/
              exit 1
            fi
          done
          
          echo "✅ Angular build completed successfully"

      - name: Configure Podfile with Static Setup
        script: |
          echo "=== CONFIGURING PODFILE ==="
          cat << 'EOF' > ios/App/Podfile
          platform :ios, '13.0'
          use_frameworks! :linkage => :static

          target 'App' do
            # Core Capacitor with explicit static configuration
            pod 'Capacitor', :path => '../../node_modules/@capacitor/ios', 
                :modular_headers => true,
                :configuration => ['Debug', 'Release']
            
            pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios',
                :modular_headers => true,
                :configuration => ['Debug', 'Release']
            
            # Capacitor Plugins
            pod 'CapacitorApp', :path => '../../node_modules/@capacitor/app'
            pod 'CapacitorCamera', :path => '../../node_modules/@capacitor/camera'
            pod 'CapacitorKeyboard', :path => '../../node_modules/@capacitor/keyboard'
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                # Common settings for all targets
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['SKIP_INSTALL'] = 'NO'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                
                # Special handling for Capacitor targets
                if target.name.start_with?('Capacitor')
                  config.build_settings['DEFINES_MODULE'] = 'YES'
                  config.build_settings['SWIFT_VERSION'] = '5.0'
                  config.build_settings['MACH_O_TYPE'] = 'staticlib'
                  config.build_settings['OTHER_CFLAGS'] = '-fmodule-map-file=${PODS_ROOT}/Headers/Public/Capacitor/module.modulemap'
                  config.build_settings['OTHER_SWIFT_FLAGS'] = '-import-underlying-module'
                  config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
                  config.build_settings['GENERATE_INFOPLIST_FILE'] = 'YES'
                end
              end
            end

            # Create required modulemap and headers
            capacitor_dir = File.join(installer.sandbox.root, 'Headers/Public/Capacitor')
            FileUtils.mkdir_p(capacitor_dir)
            
            # Modulemap content
            modulemap_content = <<-MODULEMAP
            framework module Capacitor {
              umbrella header "Capacitor.h"
              export *
              module * { export * }
            }
            MODULEMAP
            
            File.write(File.join(capacitor_dir, 'module.modulemap'), modulemap_content)
            
            # Copy required headers from node_modules
            headers = Dir.glob(File.join('../../node_modules/@capacitor/ios/Capacitor/Capacitor', '*.h'))
            headers.each do |header|
              header_name = File.basename(header)
              dest = File.join(capacitor_dir, header_name)
              FileUtils.cp(header, dest) unless File.exist?(dest)
            end
          end
          EOF
      - name: Install Pods with Static Framework Support
        script: |
          echo "=== INSTALLING PODS ==="
          cd ios/App
          pod install --repo-update
          
          # Verify Pods were installed
          if [ ! -d "Pods" ]; then
            echo "❌ Pods directory not created"
            exit 1
          fi
          
          # Create required modulemap if it doesn't exist
          mkdir -p Pods/Headers/Public/Capacitor
          cat <<EOF > Pods/Headers/Public/Capacitor/module.modulemap
          framework module Capacitor {
            umbrella header "Capacitor.h"
            export *
            module * { export * }
          }
          EOF
          
          echo "✅ Pods installed successfully"
      - name: Setup Static Framework Infrastructure
        script: |
          echo "=== SETTING UP STATIC FRAMEWORK INFRASTRUCTURE ==="
          cd ios/App
          
          mkdir -p Pods/Headers/Public/Capacitor/Capacitor
          cat <<EOF > Pods/Headers/Public/Capacitor/module.modulemap
          framework module Capacitor {
            umbrella header "Capacitor.h"
            export *
            module * { export * }
          }
          EOF
          
          BRIDGE_HEADER="Pods/Headers/Public/Capacitor/Capacitor/Capacitor-Bridging-Header.h"
          [ -f "$BRIDGE_HEADER" ] || touch "$BRIDGE_HEADER"
          
          CAP_HEADERS=(
            "Capacitor.h"
            "CAPBridgeViewController.h"
            "CAPBridgedPlugin.h"
          )
          
          for header in "${CAP_HEADERS[@]}"; do
            [ -f "Pods/Headers/Public/Capacitor/$header" ] || 
              cp "../../node_modules/@capacitor/ios/Capacitor/Capacitor/$header" "Pods/Headers/Public/Capacitor/" || true
          done
          
          echo "✅ Static framework infrastructure verified"

      - name: Verify Static Framework Setup
        script: |
          echo "=== VERIFYING STATIC FRAMEWORK SETUP ==="
          cd ios/App
          
          # 1. Verify modulemap exists
          if [ ! -f "Pods/Headers/Public/Capacitor/module.modulemap" ]; then
            echo "❌ Critical: Missing Capacitor module.modulemap"
            echo "Creating modulemap..."
            mkdir -p Pods/Headers/Public/Capacitor
            cat <<EOF > Pods/Headers/Public/Capacitor/module.modulemap
            framework module Capacitor {
              umbrella header "Capacitor.h"
              export *
              module * { export * }
            }
            EOF
                fi

          # 2. Verify umbrella header exists
          if [ ! -f "Pods/Headers/Public/Capacitor/Capacitor.h" ]; then
            echo "❌ Critical: Missing Capacitor.h umbrella header"
            echo "Copying headers from node_modules..."
            mkdir -p Pods/Headers/Public/Capacitor
            cp -v ../../node_modules/@capacitor/ios/Capacitor/Capacitor/*.h Pods/Headers/Public/Capacitor/
          fi

          # 3. Verify Pods project is configured for static libs
          if ! grep -q "MACH_O_TYPE = staticlib" "Pods/Pods.xcodeproj/project.pbxproj"; then
            echo "❌ Pods not configured for static linking - regenerating Pods"
            rm -rf Pods Podfile.lock
            pod install --repo-update
          fi

          # 4. Build Capacitor static library explicitly
          echo "Building Capacitor static library..."
          set -o pipefail && xcodebuild \
            -workspace App.xcworkspace \
            -scheme Capacitor \
            -configuration Release \
            -sdk iphoneos \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            MACH_O_TYPE=staticlib \
            ONLY_ACTIVE_ARCH=NO \
            SKIP_INSTALL=NO \
            build | tee capacitor_build.log
          
          # Check build result
          if [ $? -ne 0 ]; then
            echo "❌ Failed to build Capacitor static library"
            echo "=== BUILD ERRORS ==="
            grep -A5 -B5 "error:" capacitor_build.log | grep -v "errors generated" | head -50
            exit 1
          fi

          # 5. Verify the static library was created
          LIB_PATH=$(find "${PWD}" -name "libCapacitor.a" | head -1)
          if [ -z "${LIB_PATH}" ]; then
            echo "❌ Failed to find built Capacitor static library"
            echo "Searching in:"
            find "${PWD}/Pods" -name "*.a" -exec echo "  {}" \;
            exit 1
          fi

          # 6. Verify architectures in the static library
          ARCHS=$(lipo -info "${LIB_PATH}" 2>/dev/null | awk -F': ' '{print $2}')
          if [[ ! "${ARCHS}" =~ "arm64" ]]; then
            echo "❌ Capacitor static library missing arm64 architecture"
            echo "Found architectures: ${ARCHS}"
            exit 1
          fi

          echo "✅ Static framework setup verified"
          echo "Library path: ${LIB_PATH}"
          echo "Architectures: ${ARCHS}"

      - name: Verify Pod Installation Results
        script: |
          echo "=== POD INSTALLATION VERIFICATION ==="
          cd ios/App
          
          REQUIRED_FILES=(
            "Pods/Capacitor/libCapacitor.a"
            "Pods/CapacitorCordova/libCapacitorCordova.a"
            "Pods/Headers/Public/Capacitor/Capacitor.h"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            [ -f "$file" ] || {
              echo "❌ Missing critical pod file: $file"
              exit 1
            }
          done
          
          ARCHS=$(lipo -info Pods/Capacitor/libCapacitor.a 2>/dev/null | awk -F': ' '{print $2}')
          [[ "$ARCHS" == *"arm64"* ]] || {
            echo "❌ Capacitor static library missing arm64 architecture"
            echo "Found architectures: $ARCHS"
            exit 1
          }
          
          echo "✅ Pod installation verified"

      - name: Sync Capacitor iOS Project
        script: |
          echo "=== SYNCING CAPACITOR IOS ==="
          rm -rf ios/App/App/public
          npx cap sync ios
          
          REQUIRED_FILES=(
            "ios/App/App/public/index.html"
            "ios/App/App/App.entitlements"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing critical file: $file"
              mkdir -p ios/App/App/public
              cp -R www/* ios/App/App/public/
              [ -f "$file" ] || {
                echo "❌ Still missing after manual copy"
                exit 1
              }
            fi
          done
          
          [ -d "ios/App/App.xcworkspace" ] || {
            echo "❌ Xcode workspace missing"
            exit 1
          }
          
          echo "✅ iOS sync completed successfully"

      - name: Update Info.plist
        script: |
          echo "=== UPDATING INFO.PLIST ==="
          PLIST_PATH="ios/App/App/Info.plist"
          
          /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity dict" "$PLIST_PATH" || true
          
          for domain in "api.papricut.com" "cdn.papricut.com"; do
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains dict" "$PLIST_PATH" || true
            /usr/libexec/PlistBuddy -c "Add :NSAppTransportSecurity:NSExceptionDomains:${domain} dict" "$PLIST_PATH" || true
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSIncludesSubdomains true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionAllowsInsecureHTTPLoads false" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionRequiresForwardSecrecy true" "$PLIST_PATH"
            /usr/libexec/PlistBuddy -c "Set :NSAppTransportSecurity:NSExceptionDomains:${domain}:NSExceptionMinimumTLSVersion TLSv1.2" "$PLIST_PATH"
          done

      - name: Setup Code Signing
        script: |
          echo "=== SETTING UP CODE SIGNING ==="
          
          # Decode signing assets
          echo "$DISTRIBUTION_CERTIFICATE" | base64 --decode > signing.p12
          echo "$PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_NAME.mobileprovision"
          
          # Install provisioning profile
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< $(security cms -D -i "$PROFILE_NAME.mobileprovision"))
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV
          
          # Setup keychain
          security create-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

      - name: Configure Pods Signing (Static Framework Fix)
        script: |
          echo "=== CONFIGURING PODS FOR STATIC FRAMEWORKS ==="
          find ios/App/Pods -name project.pbxproj | while read pbxproj; do
            sed -i '' 's/CODE_SIGNING_ALLOWED = .*/CODE_SIGNING_ALLOWED = NO;/g' "$pbxproj"
            sed -i '' 's/CODE_SIGNING_REQUIRED = .*/CODE_SIGNING_REQUIRED = NO;/g' "$pbxproj"
            sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = "";/g' "$pbxproj"
            sed -i '' 's/PROVISIONING_PROFILE = .*/PROVISIONING_PROFILE = "";/g' "$pbxproj"
            sed -i '' 's/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = "";/g' "$pbxproj"
            sed -i '' 's/CODE_SIGN_STYLE = .*/CODE_SIGN_STYLE = Automatic;/g' "$pbxproj"
          done

      - name: Increment Build Number
        script: |
          PLIST_PATH="ios/App/App/Info.plist"
          CURRENT_BUILD=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_PATH")
          NEW_BUILD=$((CURRENT_BUILD + 1))
          /usr/libexec/PlistBuddy -c "Set CFBundleVersion $NEW_BUILD" "$PLIST_PATH"
          echo "Updated build number from $CURRENT_BUILD to $NEW_BUILD"

      - name: Build IPA with Static Framework Support
        script: |
          echo "=== BUILDING WITH STATIC FRAMEWORK SUPPORT ==="
          export NSUnbufferedIO=YES
          export CAPACITOR_IOS_POD_PATH=$(pwd)/ios/App/Pods/Capacitor
          export CAPACITOR_LIB_SEARCH_PATHS="$CAPACITOR_IOS_POD_PATH/Static"
          
          rm -rf "$HOME/build"
          mkdir -p "$HOME/build"
          
          set -o pipefail && xcodebuild \
                    -workspace "$XCODE_WORKSPACE" \
                    -scheme "$XCODE_SCHEME" \
                    -sdk iphoneos \
                    -configuration Release \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -allowProvisioningUpdates \
                    -destination 'generic/platform=iOS' \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
                    CODE_SIGN_STYLE="Manual" \
                    CODE_SIGN_IDENTITY="iPhone Distribution" \
                    PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
                    PROVISIONING_PROFILE="$PROFILE_UUID" \
                    OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
                    ENABLE_BITCODE=NO \
                    BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                    SKIP_INSTALL=NO \
                    OTHER_LDFLAGS="-ObjC -all_load -lCapacitor -lCapacitorCordova" \
                    LIBRARY_SEARCH_PATHS="\$(inherited) ${PODS_CONFIGURATION_BUILD_DIR}/Capacitor ${PODS_CONFIGURATION_BUILD_DIR}/CapacitorCordova ${PODS_ROOT}/../../node_modules/@capacitor/ios/Capacitor" \
                    FRAMEWORK_SEARCH_PATHS="\$(inherited) ${PODS_ROOT}/Capacitor ${PODS_ROOT}/CapacitorCordova" \
                    LD_RUNPATH_SEARCH_PATHS="@executable_path/Frameworks" \
                    ONLY_ACTIVE_ARCH=NO \
                    GCC_PREPROCESSOR_DEFINITIONS="\$(inherited) CAPACITOR_ENABLE_STATIC_FRAMEWORK=1 CAPACITOR_USE_STATIC=1" \
                    SWIFT_INCLUDE_PATHS="${PODS_ROOT}/Headers/Public/Capacitor" \
                    CLANG_ENABLE_MODULES=YES \
                    archive | tee "$HOME/build/xcodebuild.log"
          
          echo "✅ Build completed successfully"

      - name: Validate Bundle (Robust Static Linking Check)
        script: |
          echo "=== VALIDATING BUNDLE ==="
          ARCHIVE_PATH="$HOME/build/App.xcarchive"
          APP_PATH="$ARCHIVE_PATH/Products/Applications/App.app"
          
          [ -d "$APP_PATH" ] || {
            echo "❌ App bundle missing from archive"
            exit 1
          }
          
          BINARY_SIZE=$(stat -f%z "$APP_PATH/App" 2>/dev/null || echo 0)
          if [ "$BINARY_SIZE" -lt 3000000 ]; then
            echo "❌ App binary too small ($BINARY_SIZE bytes) - static linking likely failed"
            nm "$APP_PATH/App" 2>/dev/null | grep -i capacitor || echo "No Capacitor symbols found"
            exit 1
          fi
          
          REQUIRED_FILES=(
            "index.html"
            "main.*.js"
            "runtime.*.js"
          )
          
          for pattern in "${REQUIRED_FILES[@]}"; do
            ls "$APP_PATH/public/$pattern" >/dev/null 2>&1 || {
              echo "❌ Missing web file: $pattern"
              exit 1
            }
          done
          
          echo "✅ Bundle validated successfully"

      - name: Export IPA
        script: |
          echo "=== EXPORTING IPA ==="
          xcodebuild -exportArchive \
                    -archivePath "$HOME/build/App.xcarchive" \
                    -exportPath "$HOME/build/ipa" \
                    -exportOptionsPlist ExportOptions.plist \
                    -allowProvisioningUpdates | tee "$HOME/build/export_log.txt"
          
          [ -f "$HOME/build/ipa/App.ipa" ] || {
            echo "❌ IPA export failed"
            grep "error:" "$HOME/build/export_log.txt" || echo "No explicit errors found"
            exit 1
          }
          echo "✅ IPA created successfully"

      - name: Final Verification
        script: |
          echo "=== FINAL BUILD VALIDATION ==="
          APP_PATH="$HOME/build/App.xcarchive/Products/Applications/App.app"
          echo "App Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_PATH/Info.plist")"
          echo "Build Version: $(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$APP_PATH/Info.plist")"
          codesign -dv --verbose=4 "$APP_PATH"

    artifacts:
      - $HOME/build/xcodebuild.log
      - $HOME/build/export_log.txt
      - ios/App/Pods/Pods.xcodeproj/project.pbxproj
      - $HOME/build/ipa/*.ipa
    publishing:
      app_store_connect:
        auth: integration
        api_key: Codemagic-key
        submit_to_testflight: true