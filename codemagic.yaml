workflows:
  ios-distribute:
    name: iOS Distribute Workflow
    environment:
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "papricut.app.mobile"
        TEAM_ID: "H9A4H444G4"
        APP_STORE_CONNECT_USERNAME: $APP_STORE_CONNECT_USERNAME
      groups:
        - Papricut
    triggering:
      events:
        - push
    scripts:
      - name: Set up keychain and import certificate + provisioning profile
        script: |
          echo "üîê Decoding certificate..."
          echo $DISTRIBUTION_CERTIFICATE | base64 --decode > certificate.p12

          echo "üìÑ Decoding provisioning profile..."
          echo $PROVISIONING_PROFILE | base64 --decode > profile.mobileprovision

          echo "üîë Setting up keychain..."
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign || {
            echo "‚ùå Failed to import certificate. Check password or file.";
            exit 1;
          }

          echo "üîì Allowing codesign access to the keychain..."
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain > /dev/null

          echo "üì¶ Installing provisioning profile..."
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          UUID=$(security cms -D -i profile.mobileprovision | plutil -extract UUID xml1 -o - - | xmllint --xpath "string(//string)" -) || {
            echo "‚ùå Failed to extract UUID from provisioning profile.";
            exit 1;
          }
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "‚úÖ Provisioning Profile UUID: $UUID"

      - name: Install dependencies
        script: |
          npm install -g @ionic/cli
          npm ci
          npm install

      - name: Clean DerivedData
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Build Ionic project
        script: |
          ionic build --prod
          npx cap sync ios
          npx cap update ios
          cd ios/App && pod install && cd ../..

      - name: Build .ipa with xcodebuild
        script: |
          echo "üì¶ Archiving the app..."
          xcodebuild -workspace "$XCODE_WORKSPACE" \
                     -scheme "$XCODE_SCHEME" \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath "$HOME/build/App.xcarchive" \
                     -destination 'generic/platform=iOS' \
                     CODE_SIGN_STYLE="Manual" \
                     CODE_SIGN_IDENTITY="Apple Distribution" \
                     DEVELOPMENT_TEAM="$TEAM_ID" \
                     PROVISIONING_PROFILE_SPECIFIER="Papricut_AppStore_2025" \
                     -allowProvisioningUpdates \
                     archive || {
                       echo "‚ùå Archive failed.";
                       exit 1;
                     }

          echo "üì§ Exporting the IPA..."
          xcodebuild -exportArchive \
                     -archivePath "$HOME/build/App.xcarchive" \
                     -exportOptionsPlist ExportOptions.plist \
                     -exportPath "$HOME/build/ipa" || {
                       echo "‚ùå Export failed.";
                       exit 1;
                     }

      - name: Upload to App Store
        script: |
          echo "üöÄ Uploading IPA to App Store Connect..."
          xcrun altool --upload-app -f "$HOME/build/ipa/"*.ipa \
                       -t ios \
                       -u "$APP_STORE_CONNECT_USERNAME" \
                       -p "$APP_SPECIFIC_PASSWORD"

    artifacts:
      - build/ipa/*.ipa
